
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Asignacion
 * 
 */
export type Asignacion = $Result.DefaultSelection<Prisma.$AsignacionPayload>
/**
 * Model Departamento
 * 
 */
export type Departamento = $Result.DefaultSelection<Prisma.$DepartamentoPayload>
/**
 * Model Personal
 * 
 */
export type Personal = $Result.DefaultSelection<Prisma.$PersonalPayload>
/**
 * Model Mantenimiento
 * 
 */
export type Mantenimiento = $Result.DefaultSelection<Prisma.$MantenimientoPayload>
/**
 * Model Auditoria
 * 
 */
export type Auditoria = $Result.DefaultSelection<Prisma.$AuditoriaPayload>
/**
 * Model Activo
 * 
 */
export type Activo = $Result.DefaultSelection<Prisma.$ActivoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.asignacion`: Exposes CRUD operations for the **Asignacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Asignacions
    * const asignacions = await prisma.asignacion.findMany()
    * ```
    */
  get asignacion(): Prisma.AsignacionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.departamento`: Exposes CRUD operations for the **Departamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departamentos
    * const departamentos = await prisma.departamento.findMany()
    * ```
    */
  get departamento(): Prisma.DepartamentoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.personal`: Exposes CRUD operations for the **Personal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Personals
    * const personals = await prisma.personal.findMany()
    * ```
    */
  get personal(): Prisma.PersonalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mantenimiento`: Exposes CRUD operations for the **Mantenimiento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mantenimientos
    * const mantenimientos = await prisma.mantenimiento.findMany()
    * ```
    */
  get mantenimiento(): Prisma.MantenimientoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditoria`: Exposes CRUD operations for the **Auditoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auditorias
    * const auditorias = await prisma.auditoria.findMany()
    * ```
    */
  get auditoria(): Prisma.AuditoriaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activo`: Exposes CRUD operations for the **Activo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activos
    * const activos = await prisma.activo.findMany()
    * ```
    */
  get activo(): Prisma.ActivoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Asignacion: 'Asignacion',
    Departamento: 'Departamento',
    Personal: 'Personal',
    Mantenimiento: 'Mantenimiento',
    Auditoria: 'Auditoria',
    Activo: 'Activo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "asignacion" | "departamento" | "personal" | "mantenimiento" | "auditoria" | "activo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Asignacion: {
        payload: Prisma.$AsignacionPayload<ExtArgs>
        fields: Prisma.AsignacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AsignacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AsignacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          findFirst: {
            args: Prisma.AsignacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AsignacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          findMany: {
            args: Prisma.AsignacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>[]
          }
          create: {
            args: Prisma.AsignacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          createMany: {
            args: Prisma.AsignacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AsignacionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>[]
          }
          delete: {
            args: Prisma.AsignacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          update: {
            args: Prisma.AsignacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          deleteMany: {
            args: Prisma.AsignacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AsignacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AsignacionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>[]
          }
          upsert: {
            args: Prisma.AsignacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AsignacionPayload>
          }
          aggregate: {
            args: Prisma.AsignacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsignacion>
          }
          groupBy: {
            args: Prisma.AsignacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AsignacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AsignacionCountArgs<ExtArgs>
            result: $Utils.Optional<AsignacionCountAggregateOutputType> | number
          }
        }
      }
      Departamento: {
        payload: Prisma.$DepartamentoPayload<ExtArgs>
        fields: Prisma.DepartamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          findFirst: {
            args: Prisma.DepartamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          findMany: {
            args: Prisma.DepartamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>[]
          }
          create: {
            args: Prisma.DepartamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          createMany: {
            args: Prisma.DepartamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartamentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>[]
          }
          delete: {
            args: Prisma.DepartamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          update: {
            args: Prisma.DepartamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          deleteMany: {
            args: Prisma.DepartamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartamentoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>[]
          }
          upsert: {
            args: Prisma.DepartamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          aggregate: {
            args: Prisma.DepartamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartamento>
          }
          groupBy: {
            args: Prisma.DepartamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartamentoCountArgs<ExtArgs>
            result: $Utils.Optional<DepartamentoCountAggregateOutputType> | number
          }
        }
      }
      Personal: {
        payload: Prisma.$PersonalPayload<ExtArgs>
        fields: Prisma.PersonalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          findFirst: {
            args: Prisma.PersonalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          findMany: {
            args: Prisma.PersonalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>[]
          }
          create: {
            args: Prisma.PersonalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          createMany: {
            args: Prisma.PersonalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>[]
          }
          delete: {
            args: Prisma.PersonalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          update: {
            args: Prisma.PersonalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          deleteMany: {
            args: Prisma.PersonalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>[]
          }
          upsert: {
            args: Prisma.PersonalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          aggregate: {
            args: Prisma.PersonalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersonal>
          }
          groupBy: {
            args: Prisma.PersonalGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonalGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonalCountArgs<ExtArgs>
            result: $Utils.Optional<PersonalCountAggregateOutputType> | number
          }
        }
      }
      Mantenimiento: {
        payload: Prisma.$MantenimientoPayload<ExtArgs>
        fields: Prisma.MantenimientoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MantenimientoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MantenimientoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload>
          }
          findFirst: {
            args: Prisma.MantenimientoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MantenimientoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload>
          }
          findMany: {
            args: Prisma.MantenimientoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload>[]
          }
          create: {
            args: Prisma.MantenimientoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload>
          }
          createMany: {
            args: Prisma.MantenimientoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MantenimientoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload>[]
          }
          delete: {
            args: Prisma.MantenimientoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload>
          }
          update: {
            args: Prisma.MantenimientoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload>
          }
          deleteMany: {
            args: Prisma.MantenimientoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MantenimientoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MantenimientoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload>[]
          }
          upsert: {
            args: Prisma.MantenimientoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MantenimientoPayload>
          }
          aggregate: {
            args: Prisma.MantenimientoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMantenimiento>
          }
          groupBy: {
            args: Prisma.MantenimientoGroupByArgs<ExtArgs>
            result: $Utils.Optional<MantenimientoGroupByOutputType>[]
          }
          count: {
            args: Prisma.MantenimientoCountArgs<ExtArgs>
            result: $Utils.Optional<MantenimientoCountAggregateOutputType> | number
          }
        }
      }
      Auditoria: {
        payload: Prisma.$AuditoriaPayload<ExtArgs>
        fields: Prisma.AuditoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload>
          }
          findFirst: {
            args: Prisma.AuditoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload>
          }
          findMany: {
            args: Prisma.AuditoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload>[]
          }
          create: {
            args: Prisma.AuditoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload>
          }
          createMany: {
            args: Prisma.AuditoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditoriaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload>[]
          }
          delete: {
            args: Prisma.AuditoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload>
          }
          update: {
            args: Prisma.AuditoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload>
          }
          deleteMany: {
            args: Prisma.AuditoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditoriaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload>[]
          }
          upsert: {
            args: Prisma.AuditoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaPayload>
          }
          aggregate: {
            args: Prisma.AuditoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditoria>
          }
          groupBy: {
            args: Prisma.AuditoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditoriaCountArgs<ExtArgs>
            result: $Utils.Optional<AuditoriaCountAggregateOutputType> | number
          }
        }
      }
      Activo: {
        payload: Prisma.$ActivoPayload<ExtArgs>
        fields: Prisma.ActivoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload>
          }
          findFirst: {
            args: Prisma.ActivoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload>
          }
          findMany: {
            args: Prisma.ActivoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload>[]
          }
          create: {
            args: Prisma.ActivoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload>
          }
          createMany: {
            args: Prisma.ActivoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload>[]
          }
          delete: {
            args: Prisma.ActivoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload>
          }
          update: {
            args: Prisma.ActivoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload>
          }
          deleteMany: {
            args: Prisma.ActivoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload>[]
          }
          upsert: {
            args: Prisma.ActivoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivoPayload>
          }
          aggregate: {
            args: Prisma.ActivoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivo>
          }
          groupBy: {
            args: Prisma.ActivoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivoCountArgs<ExtArgs>
            result: $Utils.Optional<ActivoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    asignacion?: AsignacionOmit
    departamento?: DepartamentoOmit
    personal?: PersonalOmit
    mantenimiento?: MantenimientoOmit
    auditoria?: AuditoriaOmit
    activo?: ActivoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    asignaciones: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asignaciones?: boolean | UsuarioCountOutputTypeCountAsignacionesArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountAsignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsignacionWhereInput
  }


  /**
   * Count Type DepartamentoCountOutputType
   */

  export type DepartamentoCountOutputType = {
    personal: number
    asignaciones: number
  }

  export type DepartamentoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personal?: boolean | DepartamentoCountOutputTypeCountPersonalArgs
    asignaciones?: boolean | DepartamentoCountOutputTypeCountAsignacionesArgs
  }

  // Custom InputTypes
  /**
   * DepartamentoCountOutputType without action
   */
  export type DepartamentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartamentoCountOutputType
     */
    select?: DepartamentoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartamentoCountOutputType without action
   */
  export type DepartamentoCountOutputTypeCountPersonalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalWhereInput
  }

  /**
   * DepartamentoCountOutputType without action
   */
  export type DepartamentoCountOutputTypeCountAsignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsignacionWhereInput
  }


  /**
   * Count Type PersonalCountOutputType
   */

  export type PersonalCountOutputType = {
    asignaciones: number
  }

  export type PersonalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asignaciones?: boolean | PersonalCountOutputTypeCountAsignacionesArgs
  }

  // Custom InputTypes
  /**
   * PersonalCountOutputType without action
   */
  export type PersonalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalCountOutputType
     */
    select?: PersonalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PersonalCountOutputType without action
   */
  export type PersonalCountOutputTypeCountAsignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsignacionWhereInput
  }


  /**
   * Count Type ActivoCountOutputType
   */

  export type ActivoCountOutputType = {
    asignaciones: number
    mantenimientos: number
    auditorias: number
  }

  export type ActivoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asignaciones?: boolean | ActivoCountOutputTypeCountAsignacionesArgs
    mantenimientos?: boolean | ActivoCountOutputTypeCountMantenimientosArgs
    auditorias?: boolean | ActivoCountOutputTypeCountAuditoriasArgs
  }

  // Custom InputTypes
  /**
   * ActivoCountOutputType without action
   */
  export type ActivoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivoCountOutputType
     */
    select?: ActivoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivoCountOutputType without action
   */
  export type ActivoCountOutputTypeCountAsignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsignacionWhereInput
  }

  /**
   * ActivoCountOutputType without action
   */
  export type ActivoCountOutputTypeCountMantenimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MantenimientoWhereInput
  }

  /**
   * ActivoCountOutputType without action
   */
  export type ActivoCountOutputTypeCountAuditoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditoriaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    nombre: string | null
    descripcion: string | null
    isAdmin: boolean | null
    token: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    nombre: string | null
    descripcion: string | null
    isAdmin: boolean | null
    token: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    username: number
    password: number
    nombre: number
    descripcion: number
    isAdmin: number
    token: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    nombre?: true
    descripcion?: true
    isAdmin?: true
    token?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    nombre?: true
    descripcion?: true
    isAdmin?: true
    token?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    nombre?: true
    descripcion?: true
    isAdmin?: true
    token?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    username: string
    password: string
    nombre: string
    descripcion: string | null
    isAdmin: boolean
    token: string | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    nombre?: boolean
    descripcion?: boolean
    isAdmin?: boolean
    token?: boolean
    asignaciones?: boolean | Usuario$asignacionesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    nombre?: boolean
    descripcion?: boolean
    isAdmin?: boolean
    token?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    nombre?: boolean
    descripcion?: boolean
    isAdmin?: boolean
    token?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    nombre?: boolean
    descripcion?: boolean
    isAdmin?: boolean
    token?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "nombre" | "descripcion" | "isAdmin" | "token", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asignaciones?: boolean | Usuario$asignacionesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      asignaciones: Prisma.$AsignacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      nombre: string
      descripcion: string | null
      isAdmin: boolean
      token: string | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asignaciones<T extends Usuario$asignacionesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$asignacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly username: FieldRef<"Usuario", 'String'>
    readonly password: FieldRef<"Usuario", 'String'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly descripcion: FieldRef<"Usuario", 'String'>
    readonly isAdmin: FieldRef<"Usuario", 'Boolean'>
    readonly token: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.asignaciones
   */
  export type Usuario$asignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    where?: AsignacionWhereInput
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    cursor?: AsignacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Asignacion
   */

  export type AggregateAsignacion = {
    _count: AsignacionCountAggregateOutputType | null
    _avg: AsignacionAvgAggregateOutputType | null
    _sum: AsignacionSumAggregateOutputType | null
    _min: AsignacionMinAggregateOutputType | null
    _max: AsignacionMaxAggregateOutputType | null
  }

  export type AsignacionAvgAggregateOutputType = {
    id: number | null
    activoId: number | null
    usuarioId: number | null
    departamentoId: number | null
    personalId: number | null
  }

  export type AsignacionSumAggregateOutputType = {
    id: number | null
    activoId: number | null
    usuarioId: number | null
    departamentoId: number | null
    personalId: number | null
  }

  export type AsignacionMinAggregateOutputType = {
    id: number | null
    fechaAsignacion: Date | null
    fechaDevolucion: Date | null
    responsable: string | null
    activoId: number | null
    usuarioId: number | null
    departamentoId: number | null
    personalId: number | null
  }

  export type AsignacionMaxAggregateOutputType = {
    id: number | null
    fechaAsignacion: Date | null
    fechaDevolucion: Date | null
    responsable: string | null
    activoId: number | null
    usuarioId: number | null
    departamentoId: number | null
    personalId: number | null
  }

  export type AsignacionCountAggregateOutputType = {
    id: number
    fechaAsignacion: number
    fechaDevolucion: number
    responsable: number
    activoId: number
    usuarioId: number
    departamentoId: number
    personalId: number
    _all: number
  }


  export type AsignacionAvgAggregateInputType = {
    id?: true
    activoId?: true
    usuarioId?: true
    departamentoId?: true
    personalId?: true
  }

  export type AsignacionSumAggregateInputType = {
    id?: true
    activoId?: true
    usuarioId?: true
    departamentoId?: true
    personalId?: true
  }

  export type AsignacionMinAggregateInputType = {
    id?: true
    fechaAsignacion?: true
    fechaDevolucion?: true
    responsable?: true
    activoId?: true
    usuarioId?: true
    departamentoId?: true
    personalId?: true
  }

  export type AsignacionMaxAggregateInputType = {
    id?: true
    fechaAsignacion?: true
    fechaDevolucion?: true
    responsable?: true
    activoId?: true
    usuarioId?: true
    departamentoId?: true
    personalId?: true
  }

  export type AsignacionCountAggregateInputType = {
    id?: true
    fechaAsignacion?: true
    fechaDevolucion?: true
    responsable?: true
    activoId?: true
    usuarioId?: true
    departamentoId?: true
    personalId?: true
    _all?: true
  }

  export type AsignacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asignacion to aggregate.
     */
    where?: AsignacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asignacions to fetch.
     */
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AsignacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asignacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asignacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Asignacions
    **/
    _count?: true | AsignacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AsignacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AsignacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AsignacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AsignacionMaxAggregateInputType
  }

  export type GetAsignacionAggregateType<T extends AsignacionAggregateArgs> = {
        [P in keyof T & keyof AggregateAsignacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsignacion[P]>
      : GetScalarType<T[P], AggregateAsignacion[P]>
  }




  export type AsignacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsignacionWhereInput
    orderBy?: AsignacionOrderByWithAggregationInput | AsignacionOrderByWithAggregationInput[]
    by: AsignacionScalarFieldEnum[] | AsignacionScalarFieldEnum
    having?: AsignacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AsignacionCountAggregateInputType | true
    _avg?: AsignacionAvgAggregateInputType
    _sum?: AsignacionSumAggregateInputType
    _min?: AsignacionMinAggregateInputType
    _max?: AsignacionMaxAggregateInputType
  }

  export type AsignacionGroupByOutputType = {
    id: number
    fechaAsignacion: Date
    fechaDevolucion: Date | null
    responsable: string
    activoId: number
    usuarioId: number
    departamentoId: number | null
    personalId: number | null
    _count: AsignacionCountAggregateOutputType | null
    _avg: AsignacionAvgAggregateOutputType | null
    _sum: AsignacionSumAggregateOutputType | null
    _min: AsignacionMinAggregateOutputType | null
    _max: AsignacionMaxAggregateOutputType | null
  }

  type GetAsignacionGroupByPayload<T extends AsignacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AsignacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AsignacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AsignacionGroupByOutputType[P]>
            : GetScalarType<T[P], AsignacionGroupByOutputType[P]>
        }
      >
    >


  export type AsignacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechaAsignacion?: boolean
    fechaDevolucion?: boolean
    responsable?: boolean
    activoId?: boolean
    usuarioId?: boolean
    departamentoId?: boolean
    personalId?: boolean
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    departamento?: boolean | Asignacion$departamentoArgs<ExtArgs>
    personal?: boolean | Asignacion$personalArgs<ExtArgs>
  }, ExtArgs["result"]["asignacion"]>

  export type AsignacionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechaAsignacion?: boolean
    fechaDevolucion?: boolean
    responsable?: boolean
    activoId?: boolean
    usuarioId?: boolean
    departamentoId?: boolean
    personalId?: boolean
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    departamento?: boolean | Asignacion$departamentoArgs<ExtArgs>
    personal?: boolean | Asignacion$personalArgs<ExtArgs>
  }, ExtArgs["result"]["asignacion"]>

  export type AsignacionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechaAsignacion?: boolean
    fechaDevolucion?: boolean
    responsable?: boolean
    activoId?: boolean
    usuarioId?: boolean
    departamentoId?: boolean
    personalId?: boolean
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    departamento?: boolean | Asignacion$departamentoArgs<ExtArgs>
    personal?: boolean | Asignacion$personalArgs<ExtArgs>
  }, ExtArgs["result"]["asignacion"]>

  export type AsignacionSelectScalar = {
    id?: boolean
    fechaAsignacion?: boolean
    fechaDevolucion?: boolean
    responsable?: boolean
    activoId?: boolean
    usuarioId?: boolean
    departamentoId?: boolean
    personalId?: boolean
  }

  export type AsignacionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fechaAsignacion" | "fechaDevolucion" | "responsable" | "activoId" | "usuarioId" | "departamentoId" | "personalId", ExtArgs["result"]["asignacion"]>
  export type AsignacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    departamento?: boolean | Asignacion$departamentoArgs<ExtArgs>
    personal?: boolean | Asignacion$personalArgs<ExtArgs>
  }
  export type AsignacionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    departamento?: boolean | Asignacion$departamentoArgs<ExtArgs>
    personal?: boolean | Asignacion$personalArgs<ExtArgs>
  }
  export type AsignacionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    departamento?: boolean | Asignacion$departamentoArgs<ExtArgs>
    personal?: boolean | Asignacion$personalArgs<ExtArgs>
  }

  export type $AsignacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asignacion"
    objects: {
      activo: Prisma.$ActivoPayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      departamento: Prisma.$DepartamentoPayload<ExtArgs> | null
      personal: Prisma.$PersonalPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fechaAsignacion: Date
      fechaDevolucion: Date | null
      responsable: string
      activoId: number
      usuarioId: number
      departamentoId: number | null
      personalId: number | null
    }, ExtArgs["result"]["asignacion"]>
    composites: {}
  }

  type AsignacionGetPayload<S extends boolean | null | undefined | AsignacionDefaultArgs> = $Result.GetResult<Prisma.$AsignacionPayload, S>

  type AsignacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AsignacionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AsignacionCountAggregateInputType | true
    }

  export interface AsignacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asignacion'], meta: { name: 'Asignacion' } }
    /**
     * Find zero or one Asignacion that matches the filter.
     * @param {AsignacionFindUniqueArgs} args - Arguments to find a Asignacion
     * @example
     * // Get one Asignacion
     * const asignacion = await prisma.asignacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AsignacionFindUniqueArgs>(args: SelectSubset<T, AsignacionFindUniqueArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Asignacion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AsignacionFindUniqueOrThrowArgs} args - Arguments to find a Asignacion
     * @example
     * // Get one Asignacion
     * const asignacion = await prisma.asignacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AsignacionFindUniqueOrThrowArgs>(args: SelectSubset<T, AsignacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asignacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionFindFirstArgs} args - Arguments to find a Asignacion
     * @example
     * // Get one Asignacion
     * const asignacion = await prisma.asignacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AsignacionFindFirstArgs>(args?: SelectSubset<T, AsignacionFindFirstArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asignacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionFindFirstOrThrowArgs} args - Arguments to find a Asignacion
     * @example
     * // Get one Asignacion
     * const asignacion = await prisma.asignacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AsignacionFindFirstOrThrowArgs>(args?: SelectSubset<T, AsignacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Asignacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Asignacions
     * const asignacions = await prisma.asignacion.findMany()
     * 
     * // Get first 10 Asignacions
     * const asignacions = await prisma.asignacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const asignacionWithIdOnly = await prisma.asignacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AsignacionFindManyArgs>(args?: SelectSubset<T, AsignacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Asignacion.
     * @param {AsignacionCreateArgs} args - Arguments to create a Asignacion.
     * @example
     * // Create one Asignacion
     * const Asignacion = await prisma.asignacion.create({
     *   data: {
     *     // ... data to create a Asignacion
     *   }
     * })
     * 
     */
    create<T extends AsignacionCreateArgs>(args: SelectSubset<T, AsignacionCreateArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Asignacions.
     * @param {AsignacionCreateManyArgs} args - Arguments to create many Asignacions.
     * @example
     * // Create many Asignacions
     * const asignacion = await prisma.asignacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AsignacionCreateManyArgs>(args?: SelectSubset<T, AsignacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Asignacions and returns the data saved in the database.
     * @param {AsignacionCreateManyAndReturnArgs} args - Arguments to create many Asignacions.
     * @example
     * // Create many Asignacions
     * const asignacion = await prisma.asignacion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Asignacions and only return the `id`
     * const asignacionWithIdOnly = await prisma.asignacion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AsignacionCreateManyAndReturnArgs>(args?: SelectSubset<T, AsignacionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Asignacion.
     * @param {AsignacionDeleteArgs} args - Arguments to delete one Asignacion.
     * @example
     * // Delete one Asignacion
     * const Asignacion = await prisma.asignacion.delete({
     *   where: {
     *     // ... filter to delete one Asignacion
     *   }
     * })
     * 
     */
    delete<T extends AsignacionDeleteArgs>(args: SelectSubset<T, AsignacionDeleteArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Asignacion.
     * @param {AsignacionUpdateArgs} args - Arguments to update one Asignacion.
     * @example
     * // Update one Asignacion
     * const asignacion = await prisma.asignacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AsignacionUpdateArgs>(args: SelectSubset<T, AsignacionUpdateArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Asignacions.
     * @param {AsignacionDeleteManyArgs} args - Arguments to filter Asignacions to delete.
     * @example
     * // Delete a few Asignacions
     * const { count } = await prisma.asignacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AsignacionDeleteManyArgs>(args?: SelectSubset<T, AsignacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Asignacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Asignacions
     * const asignacion = await prisma.asignacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AsignacionUpdateManyArgs>(args: SelectSubset<T, AsignacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Asignacions and returns the data updated in the database.
     * @param {AsignacionUpdateManyAndReturnArgs} args - Arguments to update many Asignacions.
     * @example
     * // Update many Asignacions
     * const asignacion = await prisma.asignacion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Asignacions and only return the `id`
     * const asignacionWithIdOnly = await prisma.asignacion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AsignacionUpdateManyAndReturnArgs>(args: SelectSubset<T, AsignacionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Asignacion.
     * @param {AsignacionUpsertArgs} args - Arguments to update or create a Asignacion.
     * @example
     * // Update or create a Asignacion
     * const asignacion = await prisma.asignacion.upsert({
     *   create: {
     *     // ... data to create a Asignacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asignacion we want to update
     *   }
     * })
     */
    upsert<T extends AsignacionUpsertArgs>(args: SelectSubset<T, AsignacionUpsertArgs<ExtArgs>>): Prisma__AsignacionClient<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Asignacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionCountArgs} args - Arguments to filter Asignacions to count.
     * @example
     * // Count the number of Asignacions
     * const count = await prisma.asignacion.count({
     *   where: {
     *     // ... the filter for the Asignacions we want to count
     *   }
     * })
    **/
    count<T extends AsignacionCountArgs>(
      args?: Subset<T, AsignacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AsignacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asignacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AsignacionAggregateArgs>(args: Subset<T, AsignacionAggregateArgs>): Prisma.PrismaPromise<GetAsignacionAggregateType<T>>

    /**
     * Group by Asignacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsignacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AsignacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AsignacionGroupByArgs['orderBy'] }
        : { orderBy?: AsignacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AsignacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAsignacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asignacion model
   */
  readonly fields: AsignacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asignacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AsignacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activo<T extends ActivoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivoDefaultArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    departamento<T extends Asignacion$departamentoArgs<ExtArgs> = {}>(args?: Subset<T, Asignacion$departamentoArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    personal<T extends Asignacion$personalArgs<ExtArgs> = {}>(args?: Subset<T, Asignacion$personalArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Asignacion model
   */
  interface AsignacionFieldRefs {
    readonly id: FieldRef<"Asignacion", 'Int'>
    readonly fechaAsignacion: FieldRef<"Asignacion", 'DateTime'>
    readonly fechaDevolucion: FieldRef<"Asignacion", 'DateTime'>
    readonly responsable: FieldRef<"Asignacion", 'String'>
    readonly activoId: FieldRef<"Asignacion", 'Int'>
    readonly usuarioId: FieldRef<"Asignacion", 'Int'>
    readonly departamentoId: FieldRef<"Asignacion", 'Int'>
    readonly personalId: FieldRef<"Asignacion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Asignacion findUnique
   */
  export type AsignacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacion to fetch.
     */
    where: AsignacionWhereUniqueInput
  }

  /**
   * Asignacion findUniqueOrThrow
   */
  export type AsignacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacion to fetch.
     */
    where: AsignacionWhereUniqueInput
  }

  /**
   * Asignacion findFirst
   */
  export type AsignacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacion to fetch.
     */
    where?: AsignacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asignacions to fetch.
     */
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Asignacions.
     */
    cursor?: AsignacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asignacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asignacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Asignacions.
     */
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Asignacion findFirstOrThrow
   */
  export type AsignacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacion to fetch.
     */
    where?: AsignacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asignacions to fetch.
     */
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Asignacions.
     */
    cursor?: AsignacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asignacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asignacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Asignacions.
     */
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Asignacion findMany
   */
  export type AsignacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter, which Asignacions to fetch.
     */
    where?: AsignacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asignacions to fetch.
     */
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Asignacions.
     */
    cursor?: AsignacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asignacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asignacions.
     */
    skip?: number
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Asignacion create
   */
  export type AsignacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * The data needed to create a Asignacion.
     */
    data: XOR<AsignacionCreateInput, AsignacionUncheckedCreateInput>
  }

  /**
   * Asignacion createMany
   */
  export type AsignacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Asignacions.
     */
    data: AsignacionCreateManyInput | AsignacionCreateManyInput[]
  }

  /**
   * Asignacion createManyAndReturn
   */
  export type AsignacionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * The data used to create many Asignacions.
     */
    data: AsignacionCreateManyInput | AsignacionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asignacion update
   */
  export type AsignacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * The data needed to update a Asignacion.
     */
    data: XOR<AsignacionUpdateInput, AsignacionUncheckedUpdateInput>
    /**
     * Choose, which Asignacion to update.
     */
    where: AsignacionWhereUniqueInput
  }

  /**
   * Asignacion updateMany
   */
  export type AsignacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Asignacions.
     */
    data: XOR<AsignacionUpdateManyMutationInput, AsignacionUncheckedUpdateManyInput>
    /**
     * Filter which Asignacions to update
     */
    where?: AsignacionWhereInput
    /**
     * Limit how many Asignacions to update.
     */
    limit?: number
  }

  /**
   * Asignacion updateManyAndReturn
   */
  export type AsignacionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * The data used to update Asignacions.
     */
    data: XOR<AsignacionUpdateManyMutationInput, AsignacionUncheckedUpdateManyInput>
    /**
     * Filter which Asignacions to update
     */
    where?: AsignacionWhereInput
    /**
     * Limit how many Asignacions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asignacion upsert
   */
  export type AsignacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * The filter to search for the Asignacion to update in case it exists.
     */
    where: AsignacionWhereUniqueInput
    /**
     * In case the Asignacion found by the `where` argument doesn't exist, create a new Asignacion with this data.
     */
    create: XOR<AsignacionCreateInput, AsignacionUncheckedCreateInput>
    /**
     * In case the Asignacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AsignacionUpdateInput, AsignacionUncheckedUpdateInput>
  }

  /**
   * Asignacion delete
   */
  export type AsignacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    /**
     * Filter which Asignacion to delete.
     */
    where: AsignacionWhereUniqueInput
  }

  /**
   * Asignacion deleteMany
   */
  export type AsignacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asignacions to delete
     */
    where?: AsignacionWhereInput
    /**
     * Limit how many Asignacions to delete.
     */
    limit?: number
  }

  /**
   * Asignacion.departamento
   */
  export type Asignacion$departamentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    where?: DepartamentoWhereInput
  }

  /**
   * Asignacion.personal
   */
  export type Asignacion$personalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    where?: PersonalWhereInput
  }

  /**
   * Asignacion without action
   */
  export type AsignacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
  }


  /**
   * Model Departamento
   */

  export type AggregateDepartamento = {
    _count: DepartamentoCountAggregateOutputType | null
    _avg: DepartamentoAvgAggregateOutputType | null
    _sum: DepartamentoSumAggregateOutputType | null
    _min: DepartamentoMinAggregateOutputType | null
    _max: DepartamentoMaxAggregateOutputType | null
  }

  export type DepartamentoAvgAggregateOutputType = {
    id: number | null
  }

  export type DepartamentoSumAggregateOutputType = {
    id: number | null
  }

  export type DepartamentoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type DepartamentoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type DepartamentoCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type DepartamentoAvgAggregateInputType = {
    id?: true
  }

  export type DepartamentoSumAggregateInputType = {
    id?: true
  }

  export type DepartamentoMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type DepartamentoMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type DepartamentoCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type DepartamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departamento to aggregate.
     */
    where?: DepartamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departamentos to fetch.
     */
    orderBy?: DepartamentoOrderByWithRelationInput | DepartamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departamentos
    **/
    _count?: true | DepartamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartamentoMaxAggregateInputType
  }

  export type GetDepartamentoAggregateType<T extends DepartamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartamento[P]>
      : GetScalarType<T[P], AggregateDepartamento[P]>
  }




  export type DepartamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartamentoWhereInput
    orderBy?: DepartamentoOrderByWithAggregationInput | DepartamentoOrderByWithAggregationInput[]
    by: DepartamentoScalarFieldEnum[] | DepartamentoScalarFieldEnum
    having?: DepartamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartamentoCountAggregateInputType | true
    _avg?: DepartamentoAvgAggregateInputType
    _sum?: DepartamentoSumAggregateInputType
    _min?: DepartamentoMinAggregateInputType
    _max?: DepartamentoMaxAggregateInputType
  }

  export type DepartamentoGroupByOutputType = {
    id: number
    nombre: string
    _count: DepartamentoCountAggregateOutputType | null
    _avg: DepartamentoAvgAggregateOutputType | null
    _sum: DepartamentoSumAggregateOutputType | null
    _min: DepartamentoMinAggregateOutputType | null
    _max: DepartamentoMaxAggregateOutputType | null
  }

  type GetDepartamentoGroupByPayload<T extends DepartamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartamentoGroupByOutputType[P]>
            : GetScalarType<T[P], DepartamentoGroupByOutputType[P]>
        }
      >
    >


  export type DepartamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    personal?: boolean | Departamento$personalArgs<ExtArgs>
    asignaciones?: boolean | Departamento$asignacionesArgs<ExtArgs>
    _count?: boolean | DepartamentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departamento"]>

  export type DepartamentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["departamento"]>

  export type DepartamentoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["departamento"]>

  export type DepartamentoSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type DepartamentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre", ExtArgs["result"]["departamento"]>
  export type DepartamentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personal?: boolean | Departamento$personalArgs<ExtArgs>
    asignaciones?: boolean | Departamento$asignacionesArgs<ExtArgs>
    _count?: boolean | DepartamentoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartamentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DepartamentoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DepartamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Departamento"
    objects: {
      personal: Prisma.$PersonalPayload<ExtArgs>[]
      asignaciones: Prisma.$AsignacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["departamento"]>
    composites: {}
  }

  type DepartamentoGetPayload<S extends boolean | null | undefined | DepartamentoDefaultArgs> = $Result.GetResult<Prisma.$DepartamentoPayload, S>

  type DepartamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartamentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartamentoCountAggregateInputType | true
    }

  export interface DepartamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Departamento'], meta: { name: 'Departamento' } }
    /**
     * Find zero or one Departamento that matches the filter.
     * @param {DepartamentoFindUniqueArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartamentoFindUniqueArgs>(args: SelectSubset<T, DepartamentoFindUniqueArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Departamento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartamentoFindUniqueOrThrowArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Departamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoFindFirstArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartamentoFindFirstArgs>(args?: SelectSubset<T, DepartamentoFindFirstArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Departamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoFindFirstOrThrowArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departamentos
     * const departamentos = await prisma.departamento.findMany()
     * 
     * // Get first 10 Departamentos
     * const departamentos = await prisma.departamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departamentoWithIdOnly = await prisma.departamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartamentoFindManyArgs>(args?: SelectSubset<T, DepartamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Departamento.
     * @param {DepartamentoCreateArgs} args - Arguments to create a Departamento.
     * @example
     * // Create one Departamento
     * const Departamento = await prisma.departamento.create({
     *   data: {
     *     // ... data to create a Departamento
     *   }
     * })
     * 
     */
    create<T extends DepartamentoCreateArgs>(args: SelectSubset<T, DepartamentoCreateArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departamentos.
     * @param {DepartamentoCreateManyArgs} args - Arguments to create many Departamentos.
     * @example
     * // Create many Departamentos
     * const departamento = await prisma.departamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartamentoCreateManyArgs>(args?: SelectSubset<T, DepartamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departamentos and returns the data saved in the database.
     * @param {DepartamentoCreateManyAndReturnArgs} args - Arguments to create many Departamentos.
     * @example
     * // Create many Departamentos
     * const departamento = await prisma.departamento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departamentos and only return the `id`
     * const departamentoWithIdOnly = await prisma.departamento.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartamentoCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartamentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Departamento.
     * @param {DepartamentoDeleteArgs} args - Arguments to delete one Departamento.
     * @example
     * // Delete one Departamento
     * const Departamento = await prisma.departamento.delete({
     *   where: {
     *     // ... filter to delete one Departamento
     *   }
     * })
     * 
     */
    delete<T extends DepartamentoDeleteArgs>(args: SelectSubset<T, DepartamentoDeleteArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Departamento.
     * @param {DepartamentoUpdateArgs} args - Arguments to update one Departamento.
     * @example
     * // Update one Departamento
     * const departamento = await prisma.departamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartamentoUpdateArgs>(args: SelectSubset<T, DepartamentoUpdateArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departamentos.
     * @param {DepartamentoDeleteManyArgs} args - Arguments to filter Departamentos to delete.
     * @example
     * // Delete a few Departamentos
     * const { count } = await prisma.departamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartamentoDeleteManyArgs>(args?: SelectSubset<T, DepartamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departamentos
     * const departamento = await prisma.departamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartamentoUpdateManyArgs>(args: SelectSubset<T, DepartamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departamentos and returns the data updated in the database.
     * @param {DepartamentoUpdateManyAndReturnArgs} args - Arguments to update many Departamentos.
     * @example
     * // Update many Departamentos
     * const departamento = await prisma.departamento.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departamentos and only return the `id`
     * const departamentoWithIdOnly = await prisma.departamento.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartamentoUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartamentoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Departamento.
     * @param {DepartamentoUpsertArgs} args - Arguments to update or create a Departamento.
     * @example
     * // Update or create a Departamento
     * const departamento = await prisma.departamento.upsert({
     *   create: {
     *     // ... data to create a Departamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Departamento we want to update
     *   }
     * })
     */
    upsert<T extends DepartamentoUpsertArgs>(args: SelectSubset<T, DepartamentoUpsertArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoCountArgs} args - Arguments to filter Departamentos to count.
     * @example
     * // Count the number of Departamentos
     * const count = await prisma.departamento.count({
     *   where: {
     *     // ... the filter for the Departamentos we want to count
     *   }
     * })
    **/
    count<T extends DepartamentoCountArgs>(
      args?: Subset<T, DepartamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Departamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartamentoAggregateArgs>(args: Subset<T, DepartamentoAggregateArgs>): Prisma.PrismaPromise<GetDepartamentoAggregateType<T>>

    /**
     * Group by Departamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartamentoGroupByArgs['orderBy'] }
        : { orderBy?: DepartamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Departamento model
   */
  readonly fields: DepartamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Departamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    personal<T extends Departamento$personalArgs<ExtArgs> = {}>(args?: Subset<T, Departamento$personalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    asignaciones<T extends Departamento$asignacionesArgs<ExtArgs> = {}>(args?: Subset<T, Departamento$asignacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Departamento model
   */
  interface DepartamentoFieldRefs {
    readonly id: FieldRef<"Departamento", 'Int'>
    readonly nombre: FieldRef<"Departamento", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Departamento findUnique
   */
  export type DepartamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamento to fetch.
     */
    where: DepartamentoWhereUniqueInput
  }

  /**
   * Departamento findUniqueOrThrow
   */
  export type DepartamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamento to fetch.
     */
    where: DepartamentoWhereUniqueInput
  }

  /**
   * Departamento findFirst
   */
  export type DepartamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamento to fetch.
     */
    where?: DepartamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departamentos to fetch.
     */
    orderBy?: DepartamentoOrderByWithRelationInput | DepartamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departamentos.
     */
    cursor?: DepartamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departamentos.
     */
    distinct?: DepartamentoScalarFieldEnum | DepartamentoScalarFieldEnum[]
  }

  /**
   * Departamento findFirstOrThrow
   */
  export type DepartamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamento to fetch.
     */
    where?: DepartamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departamentos to fetch.
     */
    orderBy?: DepartamentoOrderByWithRelationInput | DepartamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departamentos.
     */
    cursor?: DepartamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departamentos.
     */
    distinct?: DepartamentoScalarFieldEnum | DepartamentoScalarFieldEnum[]
  }

  /**
   * Departamento findMany
   */
  export type DepartamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamentos to fetch.
     */
    where?: DepartamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departamentos to fetch.
     */
    orderBy?: DepartamentoOrderByWithRelationInput | DepartamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departamentos.
     */
    cursor?: DepartamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departamentos.
     */
    skip?: number
    distinct?: DepartamentoScalarFieldEnum | DepartamentoScalarFieldEnum[]
  }

  /**
   * Departamento create
   */
  export type DepartamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Departamento.
     */
    data: XOR<DepartamentoCreateInput, DepartamentoUncheckedCreateInput>
  }

  /**
   * Departamento createMany
   */
  export type DepartamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departamentos.
     */
    data: DepartamentoCreateManyInput | DepartamentoCreateManyInput[]
  }

  /**
   * Departamento createManyAndReturn
   */
  export type DepartamentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * The data used to create many Departamentos.
     */
    data: DepartamentoCreateManyInput | DepartamentoCreateManyInput[]
  }

  /**
   * Departamento update
   */
  export type DepartamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Departamento.
     */
    data: XOR<DepartamentoUpdateInput, DepartamentoUncheckedUpdateInput>
    /**
     * Choose, which Departamento to update.
     */
    where: DepartamentoWhereUniqueInput
  }

  /**
   * Departamento updateMany
   */
  export type DepartamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departamentos.
     */
    data: XOR<DepartamentoUpdateManyMutationInput, DepartamentoUncheckedUpdateManyInput>
    /**
     * Filter which Departamentos to update
     */
    where?: DepartamentoWhereInput
    /**
     * Limit how many Departamentos to update.
     */
    limit?: number
  }

  /**
   * Departamento updateManyAndReturn
   */
  export type DepartamentoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * The data used to update Departamentos.
     */
    data: XOR<DepartamentoUpdateManyMutationInput, DepartamentoUncheckedUpdateManyInput>
    /**
     * Filter which Departamentos to update
     */
    where?: DepartamentoWhereInput
    /**
     * Limit how many Departamentos to update.
     */
    limit?: number
  }

  /**
   * Departamento upsert
   */
  export type DepartamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Departamento to update in case it exists.
     */
    where: DepartamentoWhereUniqueInput
    /**
     * In case the Departamento found by the `where` argument doesn't exist, create a new Departamento with this data.
     */
    create: XOR<DepartamentoCreateInput, DepartamentoUncheckedCreateInput>
    /**
     * In case the Departamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartamentoUpdateInput, DepartamentoUncheckedUpdateInput>
  }

  /**
   * Departamento delete
   */
  export type DepartamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter which Departamento to delete.
     */
    where: DepartamentoWhereUniqueInput
  }

  /**
   * Departamento deleteMany
   */
  export type DepartamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departamentos to delete
     */
    where?: DepartamentoWhereInput
    /**
     * Limit how many Departamentos to delete.
     */
    limit?: number
  }

  /**
   * Departamento.personal
   */
  export type Departamento$personalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    where?: PersonalWhereInput
    orderBy?: PersonalOrderByWithRelationInput | PersonalOrderByWithRelationInput[]
    cursor?: PersonalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonalScalarFieldEnum | PersonalScalarFieldEnum[]
  }

  /**
   * Departamento.asignaciones
   */
  export type Departamento$asignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    where?: AsignacionWhereInput
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    cursor?: AsignacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Departamento without action
   */
  export type DepartamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departamento
     */
    omit?: DepartamentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
  }


  /**
   * Model Personal
   */

  export type AggregatePersonal = {
    _count: PersonalCountAggregateOutputType | null
    _avg: PersonalAvgAggregateOutputType | null
    _sum: PersonalSumAggregateOutputType | null
    _min: PersonalMinAggregateOutputType | null
    _max: PersonalMaxAggregateOutputType | null
  }

  export type PersonalAvgAggregateOutputType = {
    id: number | null
    departamentoId: number | null
  }

  export type PersonalSumAggregateOutputType = {
    id: number | null
    departamentoId: number | null
  }

  export type PersonalMinAggregateOutputType = {
    id: number | null
    rut: string | null
    nombre: string | null
    apellidoMaterno: string | null
    apellidoPaterno: string | null
    departamentoId: number | null
  }

  export type PersonalMaxAggregateOutputType = {
    id: number | null
    rut: string | null
    nombre: string | null
    apellidoMaterno: string | null
    apellidoPaterno: string | null
    departamentoId: number | null
  }

  export type PersonalCountAggregateOutputType = {
    id: number
    rut: number
    nombre: number
    apellidoMaterno: number
    apellidoPaterno: number
    departamentoId: number
    _all: number
  }


  export type PersonalAvgAggregateInputType = {
    id?: true
    departamentoId?: true
  }

  export type PersonalSumAggregateInputType = {
    id?: true
    departamentoId?: true
  }

  export type PersonalMinAggregateInputType = {
    id?: true
    rut?: true
    nombre?: true
    apellidoMaterno?: true
    apellidoPaterno?: true
    departamentoId?: true
  }

  export type PersonalMaxAggregateInputType = {
    id?: true
    rut?: true
    nombre?: true
    apellidoMaterno?: true
    apellidoPaterno?: true
    departamentoId?: true
  }

  export type PersonalCountAggregateInputType = {
    id?: true
    rut?: true
    nombre?: true
    apellidoMaterno?: true
    apellidoPaterno?: true
    departamentoId?: true
    _all?: true
  }

  export type PersonalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personal to aggregate.
     */
    where?: PersonalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personals to fetch.
     */
    orderBy?: PersonalOrderByWithRelationInput | PersonalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Personals
    **/
    _count?: true | PersonalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalMaxAggregateInputType
  }

  export type GetPersonalAggregateType<T extends PersonalAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonal[P]>
      : GetScalarType<T[P], AggregatePersonal[P]>
  }




  export type PersonalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalWhereInput
    orderBy?: PersonalOrderByWithAggregationInput | PersonalOrderByWithAggregationInput[]
    by: PersonalScalarFieldEnum[] | PersonalScalarFieldEnum
    having?: PersonalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalCountAggregateInputType | true
    _avg?: PersonalAvgAggregateInputType
    _sum?: PersonalSumAggregateInputType
    _min?: PersonalMinAggregateInputType
    _max?: PersonalMaxAggregateInputType
  }

  export type PersonalGroupByOutputType = {
    id: number
    rut: string
    nombre: string
    apellidoMaterno: string
    apellidoPaterno: string
    departamentoId: number
    _count: PersonalCountAggregateOutputType | null
    _avg: PersonalAvgAggregateOutputType | null
    _sum: PersonalSumAggregateOutputType | null
    _min: PersonalMinAggregateOutputType | null
    _max: PersonalMaxAggregateOutputType | null
  }

  type GetPersonalGroupByPayload<T extends PersonalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonalGroupByOutputType[P]>
            : GetScalarType<T[P], PersonalGroupByOutputType[P]>
        }
      >
    >


  export type PersonalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rut?: boolean
    nombre?: boolean
    apellidoMaterno?: boolean
    apellidoPaterno?: boolean
    departamentoId?: boolean
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
    asignaciones?: boolean | Personal$asignacionesArgs<ExtArgs>
    _count?: boolean | PersonalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personal"]>

  export type PersonalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rut?: boolean
    nombre?: boolean
    apellidoMaterno?: boolean
    apellidoPaterno?: boolean
    departamentoId?: boolean
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personal"]>

  export type PersonalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rut?: boolean
    nombre?: boolean
    apellidoMaterno?: boolean
    apellidoPaterno?: boolean
    departamentoId?: boolean
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personal"]>

  export type PersonalSelectScalar = {
    id?: boolean
    rut?: boolean
    nombre?: boolean
    apellidoMaterno?: boolean
    apellidoPaterno?: boolean
    departamentoId?: boolean
  }

  export type PersonalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rut" | "nombre" | "apellidoMaterno" | "apellidoPaterno" | "departamentoId", ExtArgs["result"]["personal"]>
  export type PersonalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
    asignaciones?: boolean | Personal$asignacionesArgs<ExtArgs>
    _count?: boolean | PersonalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PersonalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
  }
  export type PersonalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
  }

  export type $PersonalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Personal"
    objects: {
      departamento: Prisma.$DepartamentoPayload<ExtArgs>
      asignaciones: Prisma.$AsignacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      rut: string
      nombre: string
      apellidoMaterno: string
      apellidoPaterno: string
      departamentoId: number
    }, ExtArgs["result"]["personal"]>
    composites: {}
  }

  type PersonalGetPayload<S extends boolean | null | undefined | PersonalDefaultArgs> = $Result.GetResult<Prisma.$PersonalPayload, S>

  type PersonalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonalCountAggregateInputType | true
    }

  export interface PersonalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Personal'], meta: { name: 'Personal' } }
    /**
     * Find zero or one Personal that matches the filter.
     * @param {PersonalFindUniqueArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonalFindUniqueArgs>(args: SelectSubset<T, PersonalFindUniqueArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Personal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonalFindUniqueOrThrowArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonalFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Personal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalFindFirstArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonalFindFirstArgs>(args?: SelectSubset<T, PersonalFindFirstArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Personal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalFindFirstOrThrowArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonalFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonalFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Personals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Personals
     * const personals = await prisma.personal.findMany()
     * 
     * // Get first 10 Personals
     * const personals = await prisma.personal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personalWithIdOnly = await prisma.personal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonalFindManyArgs>(args?: SelectSubset<T, PersonalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Personal.
     * @param {PersonalCreateArgs} args - Arguments to create a Personal.
     * @example
     * // Create one Personal
     * const Personal = await prisma.personal.create({
     *   data: {
     *     // ... data to create a Personal
     *   }
     * })
     * 
     */
    create<T extends PersonalCreateArgs>(args: SelectSubset<T, PersonalCreateArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Personals.
     * @param {PersonalCreateManyArgs} args - Arguments to create many Personals.
     * @example
     * // Create many Personals
     * const personal = await prisma.personal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonalCreateManyArgs>(args?: SelectSubset<T, PersonalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Personals and returns the data saved in the database.
     * @param {PersonalCreateManyAndReturnArgs} args - Arguments to create many Personals.
     * @example
     * // Create many Personals
     * const personal = await prisma.personal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Personals and only return the `id`
     * const personalWithIdOnly = await prisma.personal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonalCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Personal.
     * @param {PersonalDeleteArgs} args - Arguments to delete one Personal.
     * @example
     * // Delete one Personal
     * const Personal = await prisma.personal.delete({
     *   where: {
     *     // ... filter to delete one Personal
     *   }
     * })
     * 
     */
    delete<T extends PersonalDeleteArgs>(args: SelectSubset<T, PersonalDeleteArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Personal.
     * @param {PersonalUpdateArgs} args - Arguments to update one Personal.
     * @example
     * // Update one Personal
     * const personal = await prisma.personal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonalUpdateArgs>(args: SelectSubset<T, PersonalUpdateArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Personals.
     * @param {PersonalDeleteManyArgs} args - Arguments to filter Personals to delete.
     * @example
     * // Delete a few Personals
     * const { count } = await prisma.personal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonalDeleteManyArgs>(args?: SelectSubset<T, PersonalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Personals
     * const personal = await prisma.personal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonalUpdateManyArgs>(args: SelectSubset<T, PersonalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personals and returns the data updated in the database.
     * @param {PersonalUpdateManyAndReturnArgs} args - Arguments to update many Personals.
     * @example
     * // Update many Personals
     * const personal = await prisma.personal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Personals and only return the `id`
     * const personalWithIdOnly = await prisma.personal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonalUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Personal.
     * @param {PersonalUpsertArgs} args - Arguments to update or create a Personal.
     * @example
     * // Update or create a Personal
     * const personal = await prisma.personal.upsert({
     *   create: {
     *     // ... data to create a Personal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Personal we want to update
     *   }
     * })
     */
    upsert<T extends PersonalUpsertArgs>(args: SelectSubset<T, PersonalUpsertArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Personals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalCountArgs} args - Arguments to filter Personals to count.
     * @example
     * // Count the number of Personals
     * const count = await prisma.personal.count({
     *   where: {
     *     // ... the filter for the Personals we want to count
     *   }
     * })
    **/
    count<T extends PersonalCountArgs>(
      args?: Subset<T, PersonalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Personal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalAggregateArgs>(args: Subset<T, PersonalAggregateArgs>): Prisma.PrismaPromise<GetPersonalAggregateType<T>>

    /**
     * Group by Personal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalGroupByArgs['orderBy'] }
        : { orderBy?: PersonalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Personal model
   */
  readonly fields: PersonalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Personal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    departamento<T extends DepartamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartamentoDefaultArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asignaciones<T extends Personal$asignacionesArgs<ExtArgs> = {}>(args?: Subset<T, Personal$asignacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Personal model
   */
  interface PersonalFieldRefs {
    readonly id: FieldRef<"Personal", 'Int'>
    readonly rut: FieldRef<"Personal", 'String'>
    readonly nombre: FieldRef<"Personal", 'String'>
    readonly apellidoMaterno: FieldRef<"Personal", 'String'>
    readonly apellidoPaterno: FieldRef<"Personal", 'String'>
    readonly departamentoId: FieldRef<"Personal", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Personal findUnique
   */
  export type PersonalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personal to fetch.
     */
    where: PersonalWhereUniqueInput
  }

  /**
   * Personal findUniqueOrThrow
   */
  export type PersonalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personal to fetch.
     */
    where: PersonalWhereUniqueInput
  }

  /**
   * Personal findFirst
   */
  export type PersonalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personal to fetch.
     */
    where?: PersonalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personals to fetch.
     */
    orderBy?: PersonalOrderByWithRelationInput | PersonalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personals.
     */
    cursor?: PersonalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personals.
     */
    distinct?: PersonalScalarFieldEnum | PersonalScalarFieldEnum[]
  }

  /**
   * Personal findFirstOrThrow
   */
  export type PersonalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personal to fetch.
     */
    where?: PersonalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personals to fetch.
     */
    orderBy?: PersonalOrderByWithRelationInput | PersonalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personals.
     */
    cursor?: PersonalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personals.
     */
    distinct?: PersonalScalarFieldEnum | PersonalScalarFieldEnum[]
  }

  /**
   * Personal findMany
   */
  export type PersonalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personals to fetch.
     */
    where?: PersonalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personals to fetch.
     */
    orderBy?: PersonalOrderByWithRelationInput | PersonalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Personals.
     */
    cursor?: PersonalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personals.
     */
    skip?: number
    distinct?: PersonalScalarFieldEnum | PersonalScalarFieldEnum[]
  }

  /**
   * Personal create
   */
  export type PersonalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * The data needed to create a Personal.
     */
    data: XOR<PersonalCreateInput, PersonalUncheckedCreateInput>
  }

  /**
   * Personal createMany
   */
  export type PersonalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Personals.
     */
    data: PersonalCreateManyInput | PersonalCreateManyInput[]
  }

  /**
   * Personal createManyAndReturn
   */
  export type PersonalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * The data used to create many Personals.
     */
    data: PersonalCreateManyInput | PersonalCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Personal update
   */
  export type PersonalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * The data needed to update a Personal.
     */
    data: XOR<PersonalUpdateInput, PersonalUncheckedUpdateInput>
    /**
     * Choose, which Personal to update.
     */
    where: PersonalWhereUniqueInput
  }

  /**
   * Personal updateMany
   */
  export type PersonalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Personals.
     */
    data: XOR<PersonalUpdateManyMutationInput, PersonalUncheckedUpdateManyInput>
    /**
     * Filter which Personals to update
     */
    where?: PersonalWhereInput
    /**
     * Limit how many Personals to update.
     */
    limit?: number
  }

  /**
   * Personal updateManyAndReturn
   */
  export type PersonalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * The data used to update Personals.
     */
    data: XOR<PersonalUpdateManyMutationInput, PersonalUncheckedUpdateManyInput>
    /**
     * Filter which Personals to update
     */
    where?: PersonalWhereInput
    /**
     * Limit how many Personals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Personal upsert
   */
  export type PersonalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * The filter to search for the Personal to update in case it exists.
     */
    where: PersonalWhereUniqueInput
    /**
     * In case the Personal found by the `where` argument doesn't exist, create a new Personal with this data.
     */
    create: XOR<PersonalCreateInput, PersonalUncheckedCreateInput>
    /**
     * In case the Personal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonalUpdateInput, PersonalUncheckedUpdateInput>
  }

  /**
   * Personal delete
   */
  export type PersonalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter which Personal to delete.
     */
    where: PersonalWhereUniqueInput
  }

  /**
   * Personal deleteMany
   */
  export type PersonalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personals to delete
     */
    where?: PersonalWhereInput
    /**
     * Limit how many Personals to delete.
     */
    limit?: number
  }

  /**
   * Personal.asignaciones
   */
  export type Personal$asignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    where?: AsignacionWhereInput
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    cursor?: AsignacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Personal without action
   */
  export type PersonalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
  }


  /**
   * Model Mantenimiento
   */

  export type AggregateMantenimiento = {
    _count: MantenimientoCountAggregateOutputType | null
    _avg: MantenimientoAvgAggregateOutputType | null
    _sum: MantenimientoSumAggregateOutputType | null
    _min: MantenimientoMinAggregateOutputType | null
    _max: MantenimientoMaxAggregateOutputType | null
  }

  export type MantenimientoAvgAggregateOutputType = {
    id: number | null
    activoId: number | null
  }

  export type MantenimientoSumAggregateOutputType = {
    id: number | null
    activoId: number | null
  }

  export type MantenimientoMinAggregateOutputType = {
    id: number | null
    fechas: Date | null
    tipo: string | null
    observacion: string | null
    activoId: number | null
  }

  export type MantenimientoMaxAggregateOutputType = {
    id: number | null
    fechas: Date | null
    tipo: string | null
    observacion: string | null
    activoId: number | null
  }

  export type MantenimientoCountAggregateOutputType = {
    id: number
    fechas: number
    tipo: number
    observacion: number
    activoId: number
    _all: number
  }


  export type MantenimientoAvgAggregateInputType = {
    id?: true
    activoId?: true
  }

  export type MantenimientoSumAggregateInputType = {
    id?: true
    activoId?: true
  }

  export type MantenimientoMinAggregateInputType = {
    id?: true
    fechas?: true
    tipo?: true
    observacion?: true
    activoId?: true
  }

  export type MantenimientoMaxAggregateInputType = {
    id?: true
    fechas?: true
    tipo?: true
    observacion?: true
    activoId?: true
  }

  export type MantenimientoCountAggregateInputType = {
    id?: true
    fechas?: true
    tipo?: true
    observacion?: true
    activoId?: true
    _all?: true
  }

  export type MantenimientoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mantenimiento to aggregate.
     */
    where?: MantenimientoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mantenimientos to fetch.
     */
    orderBy?: MantenimientoOrderByWithRelationInput | MantenimientoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MantenimientoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mantenimientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mantenimientos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mantenimientos
    **/
    _count?: true | MantenimientoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MantenimientoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MantenimientoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MantenimientoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MantenimientoMaxAggregateInputType
  }

  export type GetMantenimientoAggregateType<T extends MantenimientoAggregateArgs> = {
        [P in keyof T & keyof AggregateMantenimiento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMantenimiento[P]>
      : GetScalarType<T[P], AggregateMantenimiento[P]>
  }




  export type MantenimientoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MantenimientoWhereInput
    orderBy?: MantenimientoOrderByWithAggregationInput | MantenimientoOrderByWithAggregationInput[]
    by: MantenimientoScalarFieldEnum[] | MantenimientoScalarFieldEnum
    having?: MantenimientoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MantenimientoCountAggregateInputType | true
    _avg?: MantenimientoAvgAggregateInputType
    _sum?: MantenimientoSumAggregateInputType
    _min?: MantenimientoMinAggregateInputType
    _max?: MantenimientoMaxAggregateInputType
  }

  export type MantenimientoGroupByOutputType = {
    id: number
    fechas: Date
    tipo: string
    observacion: string
    activoId: number
    _count: MantenimientoCountAggregateOutputType | null
    _avg: MantenimientoAvgAggregateOutputType | null
    _sum: MantenimientoSumAggregateOutputType | null
    _min: MantenimientoMinAggregateOutputType | null
    _max: MantenimientoMaxAggregateOutputType | null
  }

  type GetMantenimientoGroupByPayload<T extends MantenimientoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MantenimientoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MantenimientoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MantenimientoGroupByOutputType[P]>
            : GetScalarType<T[P], MantenimientoGroupByOutputType[P]>
        }
      >
    >


  export type MantenimientoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechas?: boolean
    tipo?: boolean
    observacion?: boolean
    activoId?: boolean
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mantenimiento"]>

  export type MantenimientoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechas?: boolean
    tipo?: boolean
    observacion?: boolean
    activoId?: boolean
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mantenimiento"]>

  export type MantenimientoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechas?: boolean
    tipo?: boolean
    observacion?: boolean
    activoId?: boolean
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mantenimiento"]>

  export type MantenimientoSelectScalar = {
    id?: boolean
    fechas?: boolean
    tipo?: boolean
    observacion?: boolean
    activoId?: boolean
  }

  export type MantenimientoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fechas" | "tipo" | "observacion" | "activoId", ExtArgs["result"]["mantenimiento"]>
  export type MantenimientoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }
  export type MantenimientoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }
  export type MantenimientoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }

  export type $MantenimientoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mantenimiento"
    objects: {
      activo: Prisma.$ActivoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fechas: Date
      tipo: string
      observacion: string
      activoId: number
    }, ExtArgs["result"]["mantenimiento"]>
    composites: {}
  }

  type MantenimientoGetPayload<S extends boolean | null | undefined | MantenimientoDefaultArgs> = $Result.GetResult<Prisma.$MantenimientoPayload, S>

  type MantenimientoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MantenimientoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MantenimientoCountAggregateInputType | true
    }

  export interface MantenimientoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mantenimiento'], meta: { name: 'Mantenimiento' } }
    /**
     * Find zero or one Mantenimiento that matches the filter.
     * @param {MantenimientoFindUniqueArgs} args - Arguments to find a Mantenimiento
     * @example
     * // Get one Mantenimiento
     * const mantenimiento = await prisma.mantenimiento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MantenimientoFindUniqueArgs>(args: SelectSubset<T, MantenimientoFindUniqueArgs<ExtArgs>>): Prisma__MantenimientoClient<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Mantenimiento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MantenimientoFindUniqueOrThrowArgs} args - Arguments to find a Mantenimiento
     * @example
     * // Get one Mantenimiento
     * const mantenimiento = await prisma.mantenimiento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MantenimientoFindUniqueOrThrowArgs>(args: SelectSubset<T, MantenimientoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MantenimientoClient<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mantenimiento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MantenimientoFindFirstArgs} args - Arguments to find a Mantenimiento
     * @example
     * // Get one Mantenimiento
     * const mantenimiento = await prisma.mantenimiento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MantenimientoFindFirstArgs>(args?: SelectSubset<T, MantenimientoFindFirstArgs<ExtArgs>>): Prisma__MantenimientoClient<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mantenimiento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MantenimientoFindFirstOrThrowArgs} args - Arguments to find a Mantenimiento
     * @example
     * // Get one Mantenimiento
     * const mantenimiento = await prisma.mantenimiento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MantenimientoFindFirstOrThrowArgs>(args?: SelectSubset<T, MantenimientoFindFirstOrThrowArgs<ExtArgs>>): Prisma__MantenimientoClient<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Mantenimientos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MantenimientoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mantenimientos
     * const mantenimientos = await prisma.mantenimiento.findMany()
     * 
     * // Get first 10 Mantenimientos
     * const mantenimientos = await prisma.mantenimiento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mantenimientoWithIdOnly = await prisma.mantenimiento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MantenimientoFindManyArgs>(args?: SelectSubset<T, MantenimientoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Mantenimiento.
     * @param {MantenimientoCreateArgs} args - Arguments to create a Mantenimiento.
     * @example
     * // Create one Mantenimiento
     * const Mantenimiento = await prisma.mantenimiento.create({
     *   data: {
     *     // ... data to create a Mantenimiento
     *   }
     * })
     * 
     */
    create<T extends MantenimientoCreateArgs>(args: SelectSubset<T, MantenimientoCreateArgs<ExtArgs>>): Prisma__MantenimientoClient<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Mantenimientos.
     * @param {MantenimientoCreateManyArgs} args - Arguments to create many Mantenimientos.
     * @example
     * // Create many Mantenimientos
     * const mantenimiento = await prisma.mantenimiento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MantenimientoCreateManyArgs>(args?: SelectSubset<T, MantenimientoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Mantenimientos and returns the data saved in the database.
     * @param {MantenimientoCreateManyAndReturnArgs} args - Arguments to create many Mantenimientos.
     * @example
     * // Create many Mantenimientos
     * const mantenimiento = await prisma.mantenimiento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Mantenimientos and only return the `id`
     * const mantenimientoWithIdOnly = await prisma.mantenimiento.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MantenimientoCreateManyAndReturnArgs>(args?: SelectSubset<T, MantenimientoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Mantenimiento.
     * @param {MantenimientoDeleteArgs} args - Arguments to delete one Mantenimiento.
     * @example
     * // Delete one Mantenimiento
     * const Mantenimiento = await prisma.mantenimiento.delete({
     *   where: {
     *     // ... filter to delete one Mantenimiento
     *   }
     * })
     * 
     */
    delete<T extends MantenimientoDeleteArgs>(args: SelectSubset<T, MantenimientoDeleteArgs<ExtArgs>>): Prisma__MantenimientoClient<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Mantenimiento.
     * @param {MantenimientoUpdateArgs} args - Arguments to update one Mantenimiento.
     * @example
     * // Update one Mantenimiento
     * const mantenimiento = await prisma.mantenimiento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MantenimientoUpdateArgs>(args: SelectSubset<T, MantenimientoUpdateArgs<ExtArgs>>): Prisma__MantenimientoClient<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Mantenimientos.
     * @param {MantenimientoDeleteManyArgs} args - Arguments to filter Mantenimientos to delete.
     * @example
     * // Delete a few Mantenimientos
     * const { count } = await prisma.mantenimiento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MantenimientoDeleteManyArgs>(args?: SelectSubset<T, MantenimientoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mantenimientos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MantenimientoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mantenimientos
     * const mantenimiento = await prisma.mantenimiento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MantenimientoUpdateManyArgs>(args: SelectSubset<T, MantenimientoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mantenimientos and returns the data updated in the database.
     * @param {MantenimientoUpdateManyAndReturnArgs} args - Arguments to update many Mantenimientos.
     * @example
     * // Update many Mantenimientos
     * const mantenimiento = await prisma.mantenimiento.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Mantenimientos and only return the `id`
     * const mantenimientoWithIdOnly = await prisma.mantenimiento.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MantenimientoUpdateManyAndReturnArgs>(args: SelectSubset<T, MantenimientoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Mantenimiento.
     * @param {MantenimientoUpsertArgs} args - Arguments to update or create a Mantenimiento.
     * @example
     * // Update or create a Mantenimiento
     * const mantenimiento = await prisma.mantenimiento.upsert({
     *   create: {
     *     // ... data to create a Mantenimiento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mantenimiento we want to update
     *   }
     * })
     */
    upsert<T extends MantenimientoUpsertArgs>(args: SelectSubset<T, MantenimientoUpsertArgs<ExtArgs>>): Prisma__MantenimientoClient<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Mantenimientos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MantenimientoCountArgs} args - Arguments to filter Mantenimientos to count.
     * @example
     * // Count the number of Mantenimientos
     * const count = await prisma.mantenimiento.count({
     *   where: {
     *     // ... the filter for the Mantenimientos we want to count
     *   }
     * })
    **/
    count<T extends MantenimientoCountArgs>(
      args?: Subset<T, MantenimientoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MantenimientoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mantenimiento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MantenimientoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MantenimientoAggregateArgs>(args: Subset<T, MantenimientoAggregateArgs>): Prisma.PrismaPromise<GetMantenimientoAggregateType<T>>

    /**
     * Group by Mantenimiento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MantenimientoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MantenimientoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MantenimientoGroupByArgs['orderBy'] }
        : { orderBy?: MantenimientoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MantenimientoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMantenimientoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mantenimiento model
   */
  readonly fields: MantenimientoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mantenimiento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MantenimientoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activo<T extends ActivoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivoDefaultArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mantenimiento model
   */
  interface MantenimientoFieldRefs {
    readonly id: FieldRef<"Mantenimiento", 'Int'>
    readonly fechas: FieldRef<"Mantenimiento", 'DateTime'>
    readonly tipo: FieldRef<"Mantenimiento", 'String'>
    readonly observacion: FieldRef<"Mantenimiento", 'String'>
    readonly activoId: FieldRef<"Mantenimiento", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Mantenimiento findUnique
   */
  export type MantenimientoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    /**
     * Filter, which Mantenimiento to fetch.
     */
    where: MantenimientoWhereUniqueInput
  }

  /**
   * Mantenimiento findUniqueOrThrow
   */
  export type MantenimientoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    /**
     * Filter, which Mantenimiento to fetch.
     */
    where: MantenimientoWhereUniqueInput
  }

  /**
   * Mantenimiento findFirst
   */
  export type MantenimientoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    /**
     * Filter, which Mantenimiento to fetch.
     */
    where?: MantenimientoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mantenimientos to fetch.
     */
    orderBy?: MantenimientoOrderByWithRelationInput | MantenimientoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mantenimientos.
     */
    cursor?: MantenimientoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mantenimientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mantenimientos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mantenimientos.
     */
    distinct?: MantenimientoScalarFieldEnum | MantenimientoScalarFieldEnum[]
  }

  /**
   * Mantenimiento findFirstOrThrow
   */
  export type MantenimientoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    /**
     * Filter, which Mantenimiento to fetch.
     */
    where?: MantenimientoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mantenimientos to fetch.
     */
    orderBy?: MantenimientoOrderByWithRelationInput | MantenimientoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mantenimientos.
     */
    cursor?: MantenimientoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mantenimientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mantenimientos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mantenimientos.
     */
    distinct?: MantenimientoScalarFieldEnum | MantenimientoScalarFieldEnum[]
  }

  /**
   * Mantenimiento findMany
   */
  export type MantenimientoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    /**
     * Filter, which Mantenimientos to fetch.
     */
    where?: MantenimientoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mantenimientos to fetch.
     */
    orderBy?: MantenimientoOrderByWithRelationInput | MantenimientoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mantenimientos.
     */
    cursor?: MantenimientoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mantenimientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mantenimientos.
     */
    skip?: number
    distinct?: MantenimientoScalarFieldEnum | MantenimientoScalarFieldEnum[]
  }

  /**
   * Mantenimiento create
   */
  export type MantenimientoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    /**
     * The data needed to create a Mantenimiento.
     */
    data: XOR<MantenimientoCreateInput, MantenimientoUncheckedCreateInput>
  }

  /**
   * Mantenimiento createMany
   */
  export type MantenimientoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mantenimientos.
     */
    data: MantenimientoCreateManyInput | MantenimientoCreateManyInput[]
  }

  /**
   * Mantenimiento createManyAndReturn
   */
  export type MantenimientoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * The data used to create many Mantenimientos.
     */
    data: MantenimientoCreateManyInput | MantenimientoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Mantenimiento update
   */
  export type MantenimientoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    /**
     * The data needed to update a Mantenimiento.
     */
    data: XOR<MantenimientoUpdateInput, MantenimientoUncheckedUpdateInput>
    /**
     * Choose, which Mantenimiento to update.
     */
    where: MantenimientoWhereUniqueInput
  }

  /**
   * Mantenimiento updateMany
   */
  export type MantenimientoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mantenimientos.
     */
    data: XOR<MantenimientoUpdateManyMutationInput, MantenimientoUncheckedUpdateManyInput>
    /**
     * Filter which Mantenimientos to update
     */
    where?: MantenimientoWhereInput
    /**
     * Limit how many Mantenimientos to update.
     */
    limit?: number
  }

  /**
   * Mantenimiento updateManyAndReturn
   */
  export type MantenimientoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * The data used to update Mantenimientos.
     */
    data: XOR<MantenimientoUpdateManyMutationInput, MantenimientoUncheckedUpdateManyInput>
    /**
     * Filter which Mantenimientos to update
     */
    where?: MantenimientoWhereInput
    /**
     * Limit how many Mantenimientos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Mantenimiento upsert
   */
  export type MantenimientoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    /**
     * The filter to search for the Mantenimiento to update in case it exists.
     */
    where: MantenimientoWhereUniqueInput
    /**
     * In case the Mantenimiento found by the `where` argument doesn't exist, create a new Mantenimiento with this data.
     */
    create: XOR<MantenimientoCreateInput, MantenimientoUncheckedCreateInput>
    /**
     * In case the Mantenimiento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MantenimientoUpdateInput, MantenimientoUncheckedUpdateInput>
  }

  /**
   * Mantenimiento delete
   */
  export type MantenimientoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    /**
     * Filter which Mantenimiento to delete.
     */
    where: MantenimientoWhereUniqueInput
  }

  /**
   * Mantenimiento deleteMany
   */
  export type MantenimientoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mantenimientos to delete
     */
    where?: MantenimientoWhereInput
    /**
     * Limit how many Mantenimientos to delete.
     */
    limit?: number
  }

  /**
   * Mantenimiento without action
   */
  export type MantenimientoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
  }


  /**
   * Model Auditoria
   */

  export type AggregateAuditoria = {
    _count: AuditoriaCountAggregateOutputType | null
    _avg: AuditoriaAvgAggregateOutputType | null
    _sum: AuditoriaSumAggregateOutputType | null
    _min: AuditoriaMinAggregateOutputType | null
    _max: AuditoriaMaxAggregateOutputType | null
  }

  export type AuditoriaAvgAggregateOutputType = {
    id: number | null
    activoId: number | null
  }

  export type AuditoriaSumAggregateOutputType = {
    id: number | null
    activoId: number | null
  }

  export type AuditoriaMinAggregateOutputType = {
    id: number | null
    fecha: Date | null
    hallazgo: string | null
    activoId: number | null
  }

  export type AuditoriaMaxAggregateOutputType = {
    id: number | null
    fecha: Date | null
    hallazgo: string | null
    activoId: number | null
  }

  export type AuditoriaCountAggregateOutputType = {
    id: number
    fecha: number
    hallazgo: number
    activoId: number
    _all: number
  }


  export type AuditoriaAvgAggregateInputType = {
    id?: true
    activoId?: true
  }

  export type AuditoriaSumAggregateInputType = {
    id?: true
    activoId?: true
  }

  export type AuditoriaMinAggregateInputType = {
    id?: true
    fecha?: true
    hallazgo?: true
    activoId?: true
  }

  export type AuditoriaMaxAggregateInputType = {
    id?: true
    fecha?: true
    hallazgo?: true
    activoId?: true
  }

  export type AuditoriaCountAggregateInputType = {
    id?: true
    fecha?: true
    hallazgo?: true
    activoId?: true
    _all?: true
  }

  export type AuditoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auditoria to aggregate.
     */
    where?: AuditoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auditorias to fetch.
     */
    orderBy?: AuditoriaOrderByWithRelationInput | AuditoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auditorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auditorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auditorias
    **/
    _count?: true | AuditoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditoriaMaxAggregateInputType
  }

  export type GetAuditoriaAggregateType<T extends AuditoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditoria[P]>
      : GetScalarType<T[P], AggregateAuditoria[P]>
  }




  export type AuditoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditoriaWhereInput
    orderBy?: AuditoriaOrderByWithAggregationInput | AuditoriaOrderByWithAggregationInput[]
    by: AuditoriaScalarFieldEnum[] | AuditoriaScalarFieldEnum
    having?: AuditoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditoriaCountAggregateInputType | true
    _avg?: AuditoriaAvgAggregateInputType
    _sum?: AuditoriaSumAggregateInputType
    _min?: AuditoriaMinAggregateInputType
    _max?: AuditoriaMaxAggregateInputType
  }

  export type AuditoriaGroupByOutputType = {
    id: number
    fecha: Date
    hallazgo: string
    activoId: number
    _count: AuditoriaCountAggregateOutputType | null
    _avg: AuditoriaAvgAggregateOutputType | null
    _sum: AuditoriaSumAggregateOutputType | null
    _min: AuditoriaMinAggregateOutputType | null
    _max: AuditoriaMaxAggregateOutputType | null
  }

  type GetAuditoriaGroupByPayload<T extends AuditoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditoriaGroupByOutputType[P]>
            : GetScalarType<T[P], AuditoriaGroupByOutputType[P]>
        }
      >
    >


  export type AuditoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    hallazgo?: boolean
    activoId?: boolean
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditoria"]>

  export type AuditoriaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    hallazgo?: boolean
    activoId?: boolean
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditoria"]>

  export type AuditoriaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    hallazgo?: boolean
    activoId?: boolean
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditoria"]>

  export type AuditoriaSelectScalar = {
    id?: boolean
    fecha?: boolean
    hallazgo?: boolean
    activoId?: boolean
  }

  export type AuditoriaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fecha" | "hallazgo" | "activoId", ExtArgs["result"]["auditoria"]>
  export type AuditoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }
  export type AuditoriaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }
  export type AuditoriaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activo?: boolean | ActivoDefaultArgs<ExtArgs>
  }

  export type $AuditoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Auditoria"
    objects: {
      activo: Prisma.$ActivoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fecha: Date
      hallazgo: string
      activoId: number
    }, ExtArgs["result"]["auditoria"]>
    composites: {}
  }

  type AuditoriaGetPayload<S extends boolean | null | undefined | AuditoriaDefaultArgs> = $Result.GetResult<Prisma.$AuditoriaPayload, S>

  type AuditoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditoriaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditoriaCountAggregateInputType | true
    }

  export interface AuditoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auditoria'], meta: { name: 'Auditoria' } }
    /**
     * Find zero or one Auditoria that matches the filter.
     * @param {AuditoriaFindUniqueArgs} args - Arguments to find a Auditoria
     * @example
     * // Get one Auditoria
     * const auditoria = await prisma.auditoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditoriaFindUniqueArgs>(args: SelectSubset<T, AuditoriaFindUniqueArgs<ExtArgs>>): Prisma__AuditoriaClient<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Auditoria that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditoriaFindUniqueOrThrowArgs} args - Arguments to find a Auditoria
     * @example
     * // Get one Auditoria
     * const auditoria = await prisma.auditoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditoriaClient<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auditoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaFindFirstArgs} args - Arguments to find a Auditoria
     * @example
     * // Get one Auditoria
     * const auditoria = await prisma.auditoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditoriaFindFirstArgs>(args?: SelectSubset<T, AuditoriaFindFirstArgs<ExtArgs>>): Prisma__AuditoriaClient<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auditoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaFindFirstOrThrowArgs} args - Arguments to find a Auditoria
     * @example
     * // Get one Auditoria
     * const auditoria = await prisma.auditoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditoriaClient<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Auditorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auditorias
     * const auditorias = await prisma.auditoria.findMany()
     * 
     * // Get first 10 Auditorias
     * const auditorias = await prisma.auditoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditoriaWithIdOnly = await prisma.auditoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditoriaFindManyArgs>(args?: SelectSubset<T, AuditoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Auditoria.
     * @param {AuditoriaCreateArgs} args - Arguments to create a Auditoria.
     * @example
     * // Create one Auditoria
     * const Auditoria = await prisma.auditoria.create({
     *   data: {
     *     // ... data to create a Auditoria
     *   }
     * })
     * 
     */
    create<T extends AuditoriaCreateArgs>(args: SelectSubset<T, AuditoriaCreateArgs<ExtArgs>>): Prisma__AuditoriaClient<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Auditorias.
     * @param {AuditoriaCreateManyArgs} args - Arguments to create many Auditorias.
     * @example
     * // Create many Auditorias
     * const auditoria = await prisma.auditoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditoriaCreateManyArgs>(args?: SelectSubset<T, AuditoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Auditorias and returns the data saved in the database.
     * @param {AuditoriaCreateManyAndReturnArgs} args - Arguments to create many Auditorias.
     * @example
     * // Create many Auditorias
     * const auditoria = await prisma.auditoria.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Auditorias and only return the `id`
     * const auditoriaWithIdOnly = await prisma.auditoria.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditoriaCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditoriaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Auditoria.
     * @param {AuditoriaDeleteArgs} args - Arguments to delete one Auditoria.
     * @example
     * // Delete one Auditoria
     * const Auditoria = await prisma.auditoria.delete({
     *   where: {
     *     // ... filter to delete one Auditoria
     *   }
     * })
     * 
     */
    delete<T extends AuditoriaDeleteArgs>(args: SelectSubset<T, AuditoriaDeleteArgs<ExtArgs>>): Prisma__AuditoriaClient<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Auditoria.
     * @param {AuditoriaUpdateArgs} args - Arguments to update one Auditoria.
     * @example
     * // Update one Auditoria
     * const auditoria = await prisma.auditoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditoriaUpdateArgs>(args: SelectSubset<T, AuditoriaUpdateArgs<ExtArgs>>): Prisma__AuditoriaClient<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Auditorias.
     * @param {AuditoriaDeleteManyArgs} args - Arguments to filter Auditorias to delete.
     * @example
     * // Delete a few Auditorias
     * const { count } = await prisma.auditoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditoriaDeleteManyArgs>(args?: SelectSubset<T, AuditoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auditorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auditorias
     * const auditoria = await prisma.auditoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditoriaUpdateManyArgs>(args: SelectSubset<T, AuditoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auditorias and returns the data updated in the database.
     * @param {AuditoriaUpdateManyAndReturnArgs} args - Arguments to update many Auditorias.
     * @example
     * // Update many Auditorias
     * const auditoria = await prisma.auditoria.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Auditorias and only return the `id`
     * const auditoriaWithIdOnly = await prisma.auditoria.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditoriaUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditoriaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Auditoria.
     * @param {AuditoriaUpsertArgs} args - Arguments to update or create a Auditoria.
     * @example
     * // Update or create a Auditoria
     * const auditoria = await prisma.auditoria.upsert({
     *   create: {
     *     // ... data to create a Auditoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auditoria we want to update
     *   }
     * })
     */
    upsert<T extends AuditoriaUpsertArgs>(args: SelectSubset<T, AuditoriaUpsertArgs<ExtArgs>>): Prisma__AuditoriaClient<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Auditorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaCountArgs} args - Arguments to filter Auditorias to count.
     * @example
     * // Count the number of Auditorias
     * const count = await prisma.auditoria.count({
     *   where: {
     *     // ... the filter for the Auditorias we want to count
     *   }
     * })
    **/
    count<T extends AuditoriaCountArgs>(
      args?: Subset<T, AuditoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auditoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditoriaAggregateArgs>(args: Subset<T, AuditoriaAggregateArgs>): Prisma.PrismaPromise<GetAuditoriaAggregateType<T>>

    /**
     * Group by Auditoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditoriaGroupByArgs['orderBy'] }
        : { orderBy?: AuditoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Auditoria model
   */
  readonly fields: AuditoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Auditoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activo<T extends ActivoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivoDefaultArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Auditoria model
   */
  interface AuditoriaFieldRefs {
    readonly id: FieldRef<"Auditoria", 'Int'>
    readonly fecha: FieldRef<"Auditoria", 'DateTime'>
    readonly hallazgo: FieldRef<"Auditoria", 'String'>
    readonly activoId: FieldRef<"Auditoria", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Auditoria findUnique
   */
  export type AuditoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which Auditoria to fetch.
     */
    where: AuditoriaWhereUniqueInput
  }

  /**
   * Auditoria findUniqueOrThrow
   */
  export type AuditoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which Auditoria to fetch.
     */
    where: AuditoriaWhereUniqueInput
  }

  /**
   * Auditoria findFirst
   */
  export type AuditoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which Auditoria to fetch.
     */
    where?: AuditoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auditorias to fetch.
     */
    orderBy?: AuditoriaOrderByWithRelationInput | AuditoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auditorias.
     */
    cursor?: AuditoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auditorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auditorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auditorias.
     */
    distinct?: AuditoriaScalarFieldEnum | AuditoriaScalarFieldEnum[]
  }

  /**
   * Auditoria findFirstOrThrow
   */
  export type AuditoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which Auditoria to fetch.
     */
    where?: AuditoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auditorias to fetch.
     */
    orderBy?: AuditoriaOrderByWithRelationInput | AuditoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auditorias.
     */
    cursor?: AuditoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auditorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auditorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auditorias.
     */
    distinct?: AuditoriaScalarFieldEnum | AuditoriaScalarFieldEnum[]
  }

  /**
   * Auditoria findMany
   */
  export type AuditoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which Auditorias to fetch.
     */
    where?: AuditoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auditorias to fetch.
     */
    orderBy?: AuditoriaOrderByWithRelationInput | AuditoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auditorias.
     */
    cursor?: AuditoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auditorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auditorias.
     */
    skip?: number
    distinct?: AuditoriaScalarFieldEnum | AuditoriaScalarFieldEnum[]
  }

  /**
   * Auditoria create
   */
  export type AuditoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Auditoria.
     */
    data: XOR<AuditoriaCreateInput, AuditoriaUncheckedCreateInput>
  }

  /**
   * Auditoria createMany
   */
  export type AuditoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auditorias.
     */
    data: AuditoriaCreateManyInput | AuditoriaCreateManyInput[]
  }

  /**
   * Auditoria createManyAndReturn
   */
  export type AuditoriaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * The data used to create many Auditorias.
     */
    data: AuditoriaCreateManyInput | AuditoriaCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Auditoria update
   */
  export type AuditoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Auditoria.
     */
    data: XOR<AuditoriaUpdateInput, AuditoriaUncheckedUpdateInput>
    /**
     * Choose, which Auditoria to update.
     */
    where: AuditoriaWhereUniqueInput
  }

  /**
   * Auditoria updateMany
   */
  export type AuditoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auditorias.
     */
    data: XOR<AuditoriaUpdateManyMutationInput, AuditoriaUncheckedUpdateManyInput>
    /**
     * Filter which Auditorias to update
     */
    where?: AuditoriaWhereInput
    /**
     * Limit how many Auditorias to update.
     */
    limit?: number
  }

  /**
   * Auditoria updateManyAndReturn
   */
  export type AuditoriaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * The data used to update Auditorias.
     */
    data: XOR<AuditoriaUpdateManyMutationInput, AuditoriaUncheckedUpdateManyInput>
    /**
     * Filter which Auditorias to update
     */
    where?: AuditoriaWhereInput
    /**
     * Limit how many Auditorias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Auditoria upsert
   */
  export type AuditoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Auditoria to update in case it exists.
     */
    where: AuditoriaWhereUniqueInput
    /**
     * In case the Auditoria found by the `where` argument doesn't exist, create a new Auditoria with this data.
     */
    create: XOR<AuditoriaCreateInput, AuditoriaUncheckedCreateInput>
    /**
     * In case the Auditoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditoriaUpdateInput, AuditoriaUncheckedUpdateInput>
  }

  /**
   * Auditoria delete
   */
  export type AuditoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    /**
     * Filter which Auditoria to delete.
     */
    where: AuditoriaWhereUniqueInput
  }

  /**
   * Auditoria deleteMany
   */
  export type AuditoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auditorias to delete
     */
    where?: AuditoriaWhereInput
    /**
     * Limit how many Auditorias to delete.
     */
    limit?: number
  }

  /**
   * Auditoria without action
   */
  export type AuditoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
  }


  /**
   * Model Activo
   */

  export type AggregateActivo = {
    _count: ActivoCountAggregateOutputType | null
    _avg: ActivoAvgAggregateOutputType | null
    _sum: ActivoSumAggregateOutputType | null
    _min: ActivoMinAggregateOutputType | null
    _max: ActivoMaxAggregateOutputType | null
  }

  export type ActivoAvgAggregateOutputType = {
    id: number | null
  }

  export type ActivoSumAggregateOutputType = {
    id: number | null
  }

  export type ActivoMinAggregateOutputType = {
    id: number | null
    tipo: string | null
    marca: string | null
    modelo: string | null
    estado: string | null
    ubicacion: string | null
    numeroSerie: string | null
    fechaAdquisicion: Date | null
  }

  export type ActivoMaxAggregateOutputType = {
    id: number | null
    tipo: string | null
    marca: string | null
    modelo: string | null
    estado: string | null
    ubicacion: string | null
    numeroSerie: string | null
    fechaAdquisicion: Date | null
  }

  export type ActivoCountAggregateOutputType = {
    id: number
    tipo: number
    marca: number
    modelo: number
    estado: number
    ubicacion: number
    numeroSerie: number
    fechaAdquisicion: number
    _all: number
  }


  export type ActivoAvgAggregateInputType = {
    id?: true
  }

  export type ActivoSumAggregateInputType = {
    id?: true
  }

  export type ActivoMinAggregateInputType = {
    id?: true
    tipo?: true
    marca?: true
    modelo?: true
    estado?: true
    ubicacion?: true
    numeroSerie?: true
    fechaAdquisicion?: true
  }

  export type ActivoMaxAggregateInputType = {
    id?: true
    tipo?: true
    marca?: true
    modelo?: true
    estado?: true
    ubicacion?: true
    numeroSerie?: true
    fechaAdquisicion?: true
  }

  export type ActivoCountAggregateInputType = {
    id?: true
    tipo?: true
    marca?: true
    modelo?: true
    estado?: true
    ubicacion?: true
    numeroSerie?: true
    fechaAdquisicion?: true
    _all?: true
  }

  export type ActivoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activo to aggregate.
     */
    where?: ActivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activos to fetch.
     */
    orderBy?: ActivoOrderByWithRelationInput | ActivoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activos
    **/
    _count?: true | ActivoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivoMaxAggregateInputType
  }

  export type GetActivoAggregateType<T extends ActivoAggregateArgs> = {
        [P in keyof T & keyof AggregateActivo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivo[P]>
      : GetScalarType<T[P], AggregateActivo[P]>
  }




  export type ActivoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivoWhereInput
    orderBy?: ActivoOrderByWithAggregationInput | ActivoOrderByWithAggregationInput[]
    by: ActivoScalarFieldEnum[] | ActivoScalarFieldEnum
    having?: ActivoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivoCountAggregateInputType | true
    _avg?: ActivoAvgAggregateInputType
    _sum?: ActivoSumAggregateInputType
    _min?: ActivoMinAggregateInputType
    _max?: ActivoMaxAggregateInputType
  }

  export type ActivoGroupByOutputType = {
    id: number
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date
    _count: ActivoCountAggregateOutputType | null
    _avg: ActivoAvgAggregateOutputType | null
    _sum: ActivoSumAggregateOutputType | null
    _min: ActivoMinAggregateOutputType | null
    _max: ActivoMaxAggregateOutputType | null
  }

  type GetActivoGroupByPayload<T extends ActivoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivoGroupByOutputType[P]>
            : GetScalarType<T[P], ActivoGroupByOutputType[P]>
        }
      >
    >


  export type ActivoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    marca?: boolean
    modelo?: boolean
    estado?: boolean
    ubicacion?: boolean
    numeroSerie?: boolean
    fechaAdquisicion?: boolean
    asignaciones?: boolean | Activo$asignacionesArgs<ExtArgs>
    mantenimientos?: boolean | Activo$mantenimientosArgs<ExtArgs>
    auditorias?: boolean | Activo$auditoriasArgs<ExtArgs>
    _count?: boolean | ActivoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activo"]>

  export type ActivoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    marca?: boolean
    modelo?: boolean
    estado?: boolean
    ubicacion?: boolean
    numeroSerie?: boolean
    fechaAdquisicion?: boolean
  }, ExtArgs["result"]["activo"]>

  export type ActivoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    marca?: boolean
    modelo?: boolean
    estado?: boolean
    ubicacion?: boolean
    numeroSerie?: boolean
    fechaAdquisicion?: boolean
  }, ExtArgs["result"]["activo"]>

  export type ActivoSelectScalar = {
    id?: boolean
    tipo?: boolean
    marca?: boolean
    modelo?: boolean
    estado?: boolean
    ubicacion?: boolean
    numeroSerie?: boolean
    fechaAdquisicion?: boolean
  }

  export type ActivoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tipo" | "marca" | "modelo" | "estado" | "ubicacion" | "numeroSerie" | "fechaAdquisicion", ExtArgs["result"]["activo"]>
  export type ActivoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asignaciones?: boolean | Activo$asignacionesArgs<ExtArgs>
    mantenimientos?: boolean | Activo$mantenimientosArgs<ExtArgs>
    auditorias?: boolean | Activo$auditoriasArgs<ExtArgs>
    _count?: boolean | ActivoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActivoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ActivoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ActivoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activo"
    objects: {
      asignaciones: Prisma.$AsignacionPayload<ExtArgs>[]
      mantenimientos: Prisma.$MantenimientoPayload<ExtArgs>[]
      auditorias: Prisma.$AuditoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: string
      marca: string
      modelo: string
      estado: string
      ubicacion: string
      numeroSerie: string
      fechaAdquisicion: Date
    }, ExtArgs["result"]["activo"]>
    composites: {}
  }

  type ActivoGetPayload<S extends boolean | null | undefined | ActivoDefaultArgs> = $Result.GetResult<Prisma.$ActivoPayload, S>

  type ActivoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivoCountAggregateInputType | true
    }

  export interface ActivoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activo'], meta: { name: 'Activo' } }
    /**
     * Find zero or one Activo that matches the filter.
     * @param {ActivoFindUniqueArgs} args - Arguments to find a Activo
     * @example
     * // Get one Activo
     * const activo = await prisma.activo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivoFindUniqueArgs>(args: SelectSubset<T, ActivoFindUniqueArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Activo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivoFindUniqueOrThrowArgs} args - Arguments to find a Activo
     * @example
     * // Get one Activo
     * const activo = await prisma.activo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivoFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivoFindFirstArgs} args - Arguments to find a Activo
     * @example
     * // Get one Activo
     * const activo = await prisma.activo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivoFindFirstArgs>(args?: SelectSubset<T, ActivoFindFirstArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivoFindFirstOrThrowArgs} args - Arguments to find a Activo
     * @example
     * // Get one Activo
     * const activo = await prisma.activo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivoFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Activos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activos
     * const activos = await prisma.activo.findMany()
     * 
     * // Get first 10 Activos
     * const activos = await prisma.activo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activoWithIdOnly = await prisma.activo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivoFindManyArgs>(args?: SelectSubset<T, ActivoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Activo.
     * @param {ActivoCreateArgs} args - Arguments to create a Activo.
     * @example
     * // Create one Activo
     * const Activo = await prisma.activo.create({
     *   data: {
     *     // ... data to create a Activo
     *   }
     * })
     * 
     */
    create<T extends ActivoCreateArgs>(args: SelectSubset<T, ActivoCreateArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Activos.
     * @param {ActivoCreateManyArgs} args - Arguments to create many Activos.
     * @example
     * // Create many Activos
     * const activo = await prisma.activo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivoCreateManyArgs>(args?: SelectSubset<T, ActivoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Activos and returns the data saved in the database.
     * @param {ActivoCreateManyAndReturnArgs} args - Arguments to create many Activos.
     * @example
     * // Create many Activos
     * const activo = await prisma.activo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Activos and only return the `id`
     * const activoWithIdOnly = await prisma.activo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivoCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Activo.
     * @param {ActivoDeleteArgs} args - Arguments to delete one Activo.
     * @example
     * // Delete one Activo
     * const Activo = await prisma.activo.delete({
     *   where: {
     *     // ... filter to delete one Activo
     *   }
     * })
     * 
     */
    delete<T extends ActivoDeleteArgs>(args: SelectSubset<T, ActivoDeleteArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Activo.
     * @param {ActivoUpdateArgs} args - Arguments to update one Activo.
     * @example
     * // Update one Activo
     * const activo = await prisma.activo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivoUpdateArgs>(args: SelectSubset<T, ActivoUpdateArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Activos.
     * @param {ActivoDeleteManyArgs} args - Arguments to filter Activos to delete.
     * @example
     * // Delete a few Activos
     * const { count } = await prisma.activo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivoDeleteManyArgs>(args?: SelectSubset<T, ActivoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activos
     * const activo = await prisma.activo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivoUpdateManyArgs>(args: SelectSubset<T, ActivoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activos and returns the data updated in the database.
     * @param {ActivoUpdateManyAndReturnArgs} args - Arguments to update many Activos.
     * @example
     * // Update many Activos
     * const activo = await prisma.activo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Activos and only return the `id`
     * const activoWithIdOnly = await prisma.activo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivoUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Activo.
     * @param {ActivoUpsertArgs} args - Arguments to update or create a Activo.
     * @example
     * // Update or create a Activo
     * const activo = await prisma.activo.upsert({
     *   create: {
     *     // ... data to create a Activo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activo we want to update
     *   }
     * })
     */
    upsert<T extends ActivoUpsertArgs>(args: SelectSubset<T, ActivoUpsertArgs<ExtArgs>>): Prisma__ActivoClient<$Result.GetResult<Prisma.$ActivoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Activos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivoCountArgs} args - Arguments to filter Activos to count.
     * @example
     * // Count the number of Activos
     * const count = await prisma.activo.count({
     *   where: {
     *     // ... the filter for the Activos we want to count
     *   }
     * })
    **/
    count<T extends ActivoCountArgs>(
      args?: Subset<T, ActivoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivoAggregateArgs>(args: Subset<T, ActivoAggregateArgs>): Prisma.PrismaPromise<GetActivoAggregateType<T>>

    /**
     * Group by Activo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivoGroupByArgs['orderBy'] }
        : { orderBy?: ActivoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activo model
   */
  readonly fields: ActivoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asignaciones<T extends Activo$asignacionesArgs<ExtArgs> = {}>(args?: Subset<T, Activo$asignacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsignacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mantenimientos<T extends Activo$mantenimientosArgs<ExtArgs> = {}>(args?: Subset<T, Activo$mantenimientosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MantenimientoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditorias<T extends Activo$auditoriasArgs<ExtArgs> = {}>(args?: Subset<T, Activo$auditoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activo model
   */
  interface ActivoFieldRefs {
    readonly id: FieldRef<"Activo", 'Int'>
    readonly tipo: FieldRef<"Activo", 'String'>
    readonly marca: FieldRef<"Activo", 'String'>
    readonly modelo: FieldRef<"Activo", 'String'>
    readonly estado: FieldRef<"Activo", 'String'>
    readonly ubicacion: FieldRef<"Activo", 'String'>
    readonly numeroSerie: FieldRef<"Activo", 'String'>
    readonly fechaAdquisicion: FieldRef<"Activo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Activo findUnique
   */
  export type ActivoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
    /**
     * Filter, which Activo to fetch.
     */
    where: ActivoWhereUniqueInput
  }

  /**
   * Activo findUniqueOrThrow
   */
  export type ActivoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
    /**
     * Filter, which Activo to fetch.
     */
    where: ActivoWhereUniqueInput
  }

  /**
   * Activo findFirst
   */
  export type ActivoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
    /**
     * Filter, which Activo to fetch.
     */
    where?: ActivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activos to fetch.
     */
    orderBy?: ActivoOrderByWithRelationInput | ActivoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activos.
     */
    cursor?: ActivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activos.
     */
    distinct?: ActivoScalarFieldEnum | ActivoScalarFieldEnum[]
  }

  /**
   * Activo findFirstOrThrow
   */
  export type ActivoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
    /**
     * Filter, which Activo to fetch.
     */
    where?: ActivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activos to fetch.
     */
    orderBy?: ActivoOrderByWithRelationInput | ActivoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activos.
     */
    cursor?: ActivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activos.
     */
    distinct?: ActivoScalarFieldEnum | ActivoScalarFieldEnum[]
  }

  /**
   * Activo findMany
   */
  export type ActivoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
    /**
     * Filter, which Activos to fetch.
     */
    where?: ActivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activos to fetch.
     */
    orderBy?: ActivoOrderByWithRelationInput | ActivoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activos.
     */
    cursor?: ActivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activos.
     */
    skip?: number
    distinct?: ActivoScalarFieldEnum | ActivoScalarFieldEnum[]
  }

  /**
   * Activo create
   */
  export type ActivoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
    /**
     * The data needed to create a Activo.
     */
    data: XOR<ActivoCreateInput, ActivoUncheckedCreateInput>
  }

  /**
   * Activo createMany
   */
  export type ActivoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activos.
     */
    data: ActivoCreateManyInput | ActivoCreateManyInput[]
  }

  /**
   * Activo createManyAndReturn
   */
  export type ActivoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * The data used to create many Activos.
     */
    data: ActivoCreateManyInput | ActivoCreateManyInput[]
  }

  /**
   * Activo update
   */
  export type ActivoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
    /**
     * The data needed to update a Activo.
     */
    data: XOR<ActivoUpdateInput, ActivoUncheckedUpdateInput>
    /**
     * Choose, which Activo to update.
     */
    where: ActivoWhereUniqueInput
  }

  /**
   * Activo updateMany
   */
  export type ActivoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activos.
     */
    data: XOR<ActivoUpdateManyMutationInput, ActivoUncheckedUpdateManyInput>
    /**
     * Filter which Activos to update
     */
    where?: ActivoWhereInput
    /**
     * Limit how many Activos to update.
     */
    limit?: number
  }

  /**
   * Activo updateManyAndReturn
   */
  export type ActivoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * The data used to update Activos.
     */
    data: XOR<ActivoUpdateManyMutationInput, ActivoUncheckedUpdateManyInput>
    /**
     * Filter which Activos to update
     */
    where?: ActivoWhereInput
    /**
     * Limit how many Activos to update.
     */
    limit?: number
  }

  /**
   * Activo upsert
   */
  export type ActivoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
    /**
     * The filter to search for the Activo to update in case it exists.
     */
    where: ActivoWhereUniqueInput
    /**
     * In case the Activo found by the `where` argument doesn't exist, create a new Activo with this data.
     */
    create: XOR<ActivoCreateInput, ActivoUncheckedCreateInput>
    /**
     * In case the Activo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivoUpdateInput, ActivoUncheckedUpdateInput>
  }

  /**
   * Activo delete
   */
  export type ActivoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
    /**
     * Filter which Activo to delete.
     */
    where: ActivoWhereUniqueInput
  }

  /**
   * Activo deleteMany
   */
  export type ActivoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activos to delete
     */
    where?: ActivoWhereInput
    /**
     * Limit how many Activos to delete.
     */
    limit?: number
  }

  /**
   * Activo.asignaciones
   */
  export type Activo$asignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asignacion
     */
    select?: AsignacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asignacion
     */
    omit?: AsignacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AsignacionInclude<ExtArgs> | null
    where?: AsignacionWhereInput
    orderBy?: AsignacionOrderByWithRelationInput | AsignacionOrderByWithRelationInput[]
    cursor?: AsignacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AsignacionScalarFieldEnum | AsignacionScalarFieldEnum[]
  }

  /**
   * Activo.mantenimientos
   */
  export type Activo$mantenimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mantenimiento
     */
    select?: MantenimientoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mantenimiento
     */
    omit?: MantenimientoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MantenimientoInclude<ExtArgs> | null
    where?: MantenimientoWhereInput
    orderBy?: MantenimientoOrderByWithRelationInput | MantenimientoOrderByWithRelationInput[]
    cursor?: MantenimientoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MantenimientoScalarFieldEnum | MantenimientoScalarFieldEnum[]
  }

  /**
   * Activo.auditorias
   */
  export type Activo$auditoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditoria
     */
    select?: AuditoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auditoria
     */
    omit?: AuditoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaInclude<ExtArgs> | null
    where?: AuditoriaWhereInput
    orderBy?: AuditoriaOrderByWithRelationInput | AuditoriaOrderByWithRelationInput[]
    cursor?: AuditoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditoriaScalarFieldEnum | AuditoriaScalarFieldEnum[]
  }

  /**
   * Activo without action
   */
  export type ActivoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activo
     */
    select?: ActivoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activo
     */
    omit?: ActivoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    nombre: 'nombre',
    descripcion: 'descripcion',
    isAdmin: 'isAdmin',
    token: 'token'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const AsignacionScalarFieldEnum: {
    id: 'id',
    fechaAsignacion: 'fechaAsignacion',
    fechaDevolucion: 'fechaDevolucion',
    responsable: 'responsable',
    activoId: 'activoId',
    usuarioId: 'usuarioId',
    departamentoId: 'departamentoId',
    personalId: 'personalId'
  };

  export type AsignacionScalarFieldEnum = (typeof AsignacionScalarFieldEnum)[keyof typeof AsignacionScalarFieldEnum]


  export const DepartamentoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type DepartamentoScalarFieldEnum = (typeof DepartamentoScalarFieldEnum)[keyof typeof DepartamentoScalarFieldEnum]


  export const PersonalScalarFieldEnum: {
    id: 'id',
    rut: 'rut',
    nombre: 'nombre',
    apellidoMaterno: 'apellidoMaterno',
    apellidoPaterno: 'apellidoPaterno',
    departamentoId: 'departamentoId'
  };

  export type PersonalScalarFieldEnum = (typeof PersonalScalarFieldEnum)[keyof typeof PersonalScalarFieldEnum]


  export const MantenimientoScalarFieldEnum: {
    id: 'id',
    fechas: 'fechas',
    tipo: 'tipo',
    observacion: 'observacion',
    activoId: 'activoId'
  };

  export type MantenimientoScalarFieldEnum = (typeof MantenimientoScalarFieldEnum)[keyof typeof MantenimientoScalarFieldEnum]


  export const AuditoriaScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    hallazgo: 'hallazgo',
    activoId: 'activoId'
  };

  export type AuditoriaScalarFieldEnum = (typeof AuditoriaScalarFieldEnum)[keyof typeof AuditoriaScalarFieldEnum]


  export const ActivoScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    marca: 'marca',
    modelo: 'modelo',
    estado: 'estado',
    ubicacion: 'ubicacion',
    numeroSerie: 'numeroSerie',
    fechaAdquisicion: 'fechaAdquisicion'
  };

  export type ActivoScalarFieldEnum = (typeof ActivoScalarFieldEnum)[keyof typeof ActivoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    username?: StringFilter<"Usuario"> | string
    password?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    descripcion?: StringNullableFilter<"Usuario"> | string | null
    isAdmin?: BoolFilter<"Usuario"> | boolean
    token?: StringNullableFilter<"Usuario"> | string | null
    asignaciones?: AsignacionListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    token?: SortOrderInput | SortOrder
    asignaciones?: AsignacionOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    password?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    descripcion?: StringNullableFilter<"Usuario"> | string | null
    isAdmin?: BoolFilter<"Usuario"> | boolean
    token?: StringNullableFilter<"Usuario"> | string | null
    asignaciones?: AsignacionListRelationFilter
  }, "id" | "username">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    token?: SortOrderInput | SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    username?: StringWithAggregatesFilter<"Usuario"> | string
    password?: StringWithAggregatesFilter<"Usuario"> | string
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
    isAdmin?: BoolWithAggregatesFilter<"Usuario"> | boolean
    token?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
  }

  export type AsignacionWhereInput = {
    AND?: AsignacionWhereInput | AsignacionWhereInput[]
    OR?: AsignacionWhereInput[]
    NOT?: AsignacionWhereInput | AsignacionWhereInput[]
    id?: IntFilter<"Asignacion"> | number
    fechaAsignacion?: DateTimeFilter<"Asignacion"> | Date | string
    fechaDevolucion?: DateTimeNullableFilter<"Asignacion"> | Date | string | null
    responsable?: StringFilter<"Asignacion"> | string
    activoId?: IntFilter<"Asignacion"> | number
    usuarioId?: IntFilter<"Asignacion"> | number
    departamentoId?: IntNullableFilter<"Asignacion"> | number | null
    personalId?: IntNullableFilter<"Asignacion"> | number | null
    activo?: XOR<ActivoScalarRelationFilter, ActivoWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    departamento?: XOR<DepartamentoNullableScalarRelationFilter, DepartamentoWhereInput> | null
    personal?: XOR<PersonalNullableScalarRelationFilter, PersonalWhereInput> | null
  }

  export type AsignacionOrderByWithRelationInput = {
    id?: SortOrder
    fechaAsignacion?: SortOrder
    fechaDevolucion?: SortOrderInput | SortOrder
    responsable?: SortOrder
    activoId?: SortOrder
    usuarioId?: SortOrder
    departamentoId?: SortOrderInput | SortOrder
    personalId?: SortOrderInput | SortOrder
    activo?: ActivoOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
    departamento?: DepartamentoOrderByWithRelationInput
    personal?: PersonalOrderByWithRelationInput
  }

  export type AsignacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AsignacionWhereInput | AsignacionWhereInput[]
    OR?: AsignacionWhereInput[]
    NOT?: AsignacionWhereInput | AsignacionWhereInput[]
    fechaAsignacion?: DateTimeFilter<"Asignacion"> | Date | string
    fechaDevolucion?: DateTimeNullableFilter<"Asignacion"> | Date | string | null
    responsable?: StringFilter<"Asignacion"> | string
    activoId?: IntFilter<"Asignacion"> | number
    usuarioId?: IntFilter<"Asignacion"> | number
    departamentoId?: IntNullableFilter<"Asignacion"> | number | null
    personalId?: IntNullableFilter<"Asignacion"> | number | null
    activo?: XOR<ActivoScalarRelationFilter, ActivoWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    departamento?: XOR<DepartamentoNullableScalarRelationFilter, DepartamentoWhereInput> | null
    personal?: XOR<PersonalNullableScalarRelationFilter, PersonalWhereInput> | null
  }, "id">

  export type AsignacionOrderByWithAggregationInput = {
    id?: SortOrder
    fechaAsignacion?: SortOrder
    fechaDevolucion?: SortOrderInput | SortOrder
    responsable?: SortOrder
    activoId?: SortOrder
    usuarioId?: SortOrder
    departamentoId?: SortOrderInput | SortOrder
    personalId?: SortOrderInput | SortOrder
    _count?: AsignacionCountOrderByAggregateInput
    _avg?: AsignacionAvgOrderByAggregateInput
    _max?: AsignacionMaxOrderByAggregateInput
    _min?: AsignacionMinOrderByAggregateInput
    _sum?: AsignacionSumOrderByAggregateInput
  }

  export type AsignacionScalarWhereWithAggregatesInput = {
    AND?: AsignacionScalarWhereWithAggregatesInput | AsignacionScalarWhereWithAggregatesInput[]
    OR?: AsignacionScalarWhereWithAggregatesInput[]
    NOT?: AsignacionScalarWhereWithAggregatesInput | AsignacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Asignacion"> | number
    fechaAsignacion?: DateTimeWithAggregatesFilter<"Asignacion"> | Date | string
    fechaDevolucion?: DateTimeNullableWithAggregatesFilter<"Asignacion"> | Date | string | null
    responsable?: StringWithAggregatesFilter<"Asignacion"> | string
    activoId?: IntWithAggregatesFilter<"Asignacion"> | number
    usuarioId?: IntWithAggregatesFilter<"Asignacion"> | number
    departamentoId?: IntNullableWithAggregatesFilter<"Asignacion"> | number | null
    personalId?: IntNullableWithAggregatesFilter<"Asignacion"> | number | null
  }

  export type DepartamentoWhereInput = {
    AND?: DepartamentoWhereInput | DepartamentoWhereInput[]
    OR?: DepartamentoWhereInput[]
    NOT?: DepartamentoWhereInput | DepartamentoWhereInput[]
    id?: IntFilter<"Departamento"> | number
    nombre?: StringFilter<"Departamento"> | string
    personal?: PersonalListRelationFilter
    asignaciones?: AsignacionListRelationFilter
  }

  export type DepartamentoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    personal?: PersonalOrderByRelationAggregateInput
    asignaciones?: AsignacionOrderByRelationAggregateInput
  }

  export type DepartamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DepartamentoWhereInput | DepartamentoWhereInput[]
    OR?: DepartamentoWhereInput[]
    NOT?: DepartamentoWhereInput | DepartamentoWhereInput[]
    nombre?: StringFilter<"Departamento"> | string
    personal?: PersonalListRelationFilter
    asignaciones?: AsignacionListRelationFilter
  }, "id">

  export type DepartamentoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: DepartamentoCountOrderByAggregateInput
    _avg?: DepartamentoAvgOrderByAggregateInput
    _max?: DepartamentoMaxOrderByAggregateInput
    _min?: DepartamentoMinOrderByAggregateInput
    _sum?: DepartamentoSumOrderByAggregateInput
  }

  export type DepartamentoScalarWhereWithAggregatesInput = {
    AND?: DepartamentoScalarWhereWithAggregatesInput | DepartamentoScalarWhereWithAggregatesInput[]
    OR?: DepartamentoScalarWhereWithAggregatesInput[]
    NOT?: DepartamentoScalarWhereWithAggregatesInput | DepartamentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Departamento"> | number
    nombre?: StringWithAggregatesFilter<"Departamento"> | string
  }

  export type PersonalWhereInput = {
    AND?: PersonalWhereInput | PersonalWhereInput[]
    OR?: PersonalWhereInput[]
    NOT?: PersonalWhereInput | PersonalWhereInput[]
    id?: IntFilter<"Personal"> | number
    rut?: StringFilter<"Personal"> | string
    nombre?: StringFilter<"Personal"> | string
    apellidoMaterno?: StringFilter<"Personal"> | string
    apellidoPaterno?: StringFilter<"Personal"> | string
    departamentoId?: IntFilter<"Personal"> | number
    departamento?: XOR<DepartamentoScalarRelationFilter, DepartamentoWhereInput>
    asignaciones?: AsignacionListRelationFilter
  }

  export type PersonalOrderByWithRelationInput = {
    id?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    apellidoMaterno?: SortOrder
    apellidoPaterno?: SortOrder
    departamentoId?: SortOrder
    departamento?: DepartamentoOrderByWithRelationInput
    asignaciones?: AsignacionOrderByRelationAggregateInput
  }

  export type PersonalWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    rut?: string
    AND?: PersonalWhereInput | PersonalWhereInput[]
    OR?: PersonalWhereInput[]
    NOT?: PersonalWhereInput | PersonalWhereInput[]
    nombre?: StringFilter<"Personal"> | string
    apellidoMaterno?: StringFilter<"Personal"> | string
    apellidoPaterno?: StringFilter<"Personal"> | string
    departamentoId?: IntFilter<"Personal"> | number
    departamento?: XOR<DepartamentoScalarRelationFilter, DepartamentoWhereInput>
    asignaciones?: AsignacionListRelationFilter
  }, "id" | "rut">

  export type PersonalOrderByWithAggregationInput = {
    id?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    apellidoMaterno?: SortOrder
    apellidoPaterno?: SortOrder
    departamentoId?: SortOrder
    _count?: PersonalCountOrderByAggregateInput
    _avg?: PersonalAvgOrderByAggregateInput
    _max?: PersonalMaxOrderByAggregateInput
    _min?: PersonalMinOrderByAggregateInput
    _sum?: PersonalSumOrderByAggregateInput
  }

  export type PersonalScalarWhereWithAggregatesInput = {
    AND?: PersonalScalarWhereWithAggregatesInput | PersonalScalarWhereWithAggregatesInput[]
    OR?: PersonalScalarWhereWithAggregatesInput[]
    NOT?: PersonalScalarWhereWithAggregatesInput | PersonalScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Personal"> | number
    rut?: StringWithAggregatesFilter<"Personal"> | string
    nombre?: StringWithAggregatesFilter<"Personal"> | string
    apellidoMaterno?: StringWithAggregatesFilter<"Personal"> | string
    apellidoPaterno?: StringWithAggregatesFilter<"Personal"> | string
    departamentoId?: IntWithAggregatesFilter<"Personal"> | number
  }

  export type MantenimientoWhereInput = {
    AND?: MantenimientoWhereInput | MantenimientoWhereInput[]
    OR?: MantenimientoWhereInput[]
    NOT?: MantenimientoWhereInput | MantenimientoWhereInput[]
    id?: IntFilter<"Mantenimiento"> | number
    fechas?: DateTimeFilter<"Mantenimiento"> | Date | string
    tipo?: StringFilter<"Mantenimiento"> | string
    observacion?: StringFilter<"Mantenimiento"> | string
    activoId?: IntFilter<"Mantenimiento"> | number
    activo?: XOR<ActivoScalarRelationFilter, ActivoWhereInput>
  }

  export type MantenimientoOrderByWithRelationInput = {
    id?: SortOrder
    fechas?: SortOrder
    tipo?: SortOrder
    observacion?: SortOrder
    activoId?: SortOrder
    activo?: ActivoOrderByWithRelationInput
  }

  export type MantenimientoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MantenimientoWhereInput | MantenimientoWhereInput[]
    OR?: MantenimientoWhereInput[]
    NOT?: MantenimientoWhereInput | MantenimientoWhereInput[]
    fechas?: DateTimeFilter<"Mantenimiento"> | Date | string
    tipo?: StringFilter<"Mantenimiento"> | string
    observacion?: StringFilter<"Mantenimiento"> | string
    activoId?: IntFilter<"Mantenimiento"> | number
    activo?: XOR<ActivoScalarRelationFilter, ActivoWhereInput>
  }, "id">

  export type MantenimientoOrderByWithAggregationInput = {
    id?: SortOrder
    fechas?: SortOrder
    tipo?: SortOrder
    observacion?: SortOrder
    activoId?: SortOrder
    _count?: MantenimientoCountOrderByAggregateInput
    _avg?: MantenimientoAvgOrderByAggregateInput
    _max?: MantenimientoMaxOrderByAggregateInput
    _min?: MantenimientoMinOrderByAggregateInput
    _sum?: MantenimientoSumOrderByAggregateInput
  }

  export type MantenimientoScalarWhereWithAggregatesInput = {
    AND?: MantenimientoScalarWhereWithAggregatesInput | MantenimientoScalarWhereWithAggregatesInput[]
    OR?: MantenimientoScalarWhereWithAggregatesInput[]
    NOT?: MantenimientoScalarWhereWithAggregatesInput | MantenimientoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Mantenimiento"> | number
    fechas?: DateTimeWithAggregatesFilter<"Mantenimiento"> | Date | string
    tipo?: StringWithAggregatesFilter<"Mantenimiento"> | string
    observacion?: StringWithAggregatesFilter<"Mantenimiento"> | string
    activoId?: IntWithAggregatesFilter<"Mantenimiento"> | number
  }

  export type AuditoriaWhereInput = {
    AND?: AuditoriaWhereInput | AuditoriaWhereInput[]
    OR?: AuditoriaWhereInput[]
    NOT?: AuditoriaWhereInput | AuditoriaWhereInput[]
    id?: IntFilter<"Auditoria"> | number
    fecha?: DateTimeFilter<"Auditoria"> | Date | string
    hallazgo?: StringFilter<"Auditoria"> | string
    activoId?: IntFilter<"Auditoria"> | number
    activo?: XOR<ActivoScalarRelationFilter, ActivoWhereInput>
  }

  export type AuditoriaOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    hallazgo?: SortOrder
    activoId?: SortOrder
    activo?: ActivoOrderByWithRelationInput
  }

  export type AuditoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditoriaWhereInput | AuditoriaWhereInput[]
    OR?: AuditoriaWhereInput[]
    NOT?: AuditoriaWhereInput | AuditoriaWhereInput[]
    fecha?: DateTimeFilter<"Auditoria"> | Date | string
    hallazgo?: StringFilter<"Auditoria"> | string
    activoId?: IntFilter<"Auditoria"> | number
    activo?: XOR<ActivoScalarRelationFilter, ActivoWhereInput>
  }, "id">

  export type AuditoriaOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    hallazgo?: SortOrder
    activoId?: SortOrder
    _count?: AuditoriaCountOrderByAggregateInput
    _avg?: AuditoriaAvgOrderByAggregateInput
    _max?: AuditoriaMaxOrderByAggregateInput
    _min?: AuditoriaMinOrderByAggregateInput
    _sum?: AuditoriaSumOrderByAggregateInput
  }

  export type AuditoriaScalarWhereWithAggregatesInput = {
    AND?: AuditoriaScalarWhereWithAggregatesInput | AuditoriaScalarWhereWithAggregatesInput[]
    OR?: AuditoriaScalarWhereWithAggregatesInput[]
    NOT?: AuditoriaScalarWhereWithAggregatesInput | AuditoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Auditoria"> | number
    fecha?: DateTimeWithAggregatesFilter<"Auditoria"> | Date | string
    hallazgo?: StringWithAggregatesFilter<"Auditoria"> | string
    activoId?: IntWithAggregatesFilter<"Auditoria"> | number
  }

  export type ActivoWhereInput = {
    AND?: ActivoWhereInput | ActivoWhereInput[]
    OR?: ActivoWhereInput[]
    NOT?: ActivoWhereInput | ActivoWhereInput[]
    id?: IntFilter<"Activo"> | number
    tipo?: StringFilter<"Activo"> | string
    marca?: StringFilter<"Activo"> | string
    modelo?: StringFilter<"Activo"> | string
    estado?: StringFilter<"Activo"> | string
    ubicacion?: StringFilter<"Activo"> | string
    numeroSerie?: StringFilter<"Activo"> | string
    fechaAdquisicion?: DateTimeFilter<"Activo"> | Date | string
    asignaciones?: AsignacionListRelationFilter
    mantenimientos?: MantenimientoListRelationFilter
    auditorias?: AuditoriaListRelationFilter
  }

  export type ActivoOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    estado?: SortOrder
    ubicacion?: SortOrder
    numeroSerie?: SortOrder
    fechaAdquisicion?: SortOrder
    asignaciones?: AsignacionOrderByRelationAggregateInput
    mantenimientos?: MantenimientoOrderByRelationAggregateInput
    auditorias?: AuditoriaOrderByRelationAggregateInput
  }

  export type ActivoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    numeroSerie?: string
    AND?: ActivoWhereInput | ActivoWhereInput[]
    OR?: ActivoWhereInput[]
    NOT?: ActivoWhereInput | ActivoWhereInput[]
    tipo?: StringFilter<"Activo"> | string
    marca?: StringFilter<"Activo"> | string
    modelo?: StringFilter<"Activo"> | string
    estado?: StringFilter<"Activo"> | string
    ubicacion?: StringFilter<"Activo"> | string
    fechaAdquisicion?: DateTimeFilter<"Activo"> | Date | string
    asignaciones?: AsignacionListRelationFilter
    mantenimientos?: MantenimientoListRelationFilter
    auditorias?: AuditoriaListRelationFilter
  }, "id" | "numeroSerie">

  export type ActivoOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    estado?: SortOrder
    ubicacion?: SortOrder
    numeroSerie?: SortOrder
    fechaAdquisicion?: SortOrder
    _count?: ActivoCountOrderByAggregateInput
    _avg?: ActivoAvgOrderByAggregateInput
    _max?: ActivoMaxOrderByAggregateInput
    _min?: ActivoMinOrderByAggregateInput
    _sum?: ActivoSumOrderByAggregateInput
  }

  export type ActivoScalarWhereWithAggregatesInput = {
    AND?: ActivoScalarWhereWithAggregatesInput | ActivoScalarWhereWithAggregatesInput[]
    OR?: ActivoScalarWhereWithAggregatesInput[]
    NOT?: ActivoScalarWhereWithAggregatesInput | ActivoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Activo"> | number
    tipo?: StringWithAggregatesFilter<"Activo"> | string
    marca?: StringWithAggregatesFilter<"Activo"> | string
    modelo?: StringWithAggregatesFilter<"Activo"> | string
    estado?: StringWithAggregatesFilter<"Activo"> | string
    ubicacion?: StringWithAggregatesFilter<"Activo"> | string
    numeroSerie?: StringWithAggregatesFilter<"Activo"> | string
    fechaAdquisicion?: DateTimeWithAggregatesFilter<"Activo"> | Date | string
  }

  export type UsuarioCreateInput = {
    username: string
    password: string
    nombre: string
    descripcion?: string | null
    isAdmin?: boolean
    token?: string | null
    asignaciones?: AsignacionCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    nombre: string
    descripcion?: string | null
    isAdmin?: boolean
    token?: string | null
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    asignaciones?: AsignacionUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    asignaciones?: AsignacionUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    username: string
    password: string
    nombre: string
    descripcion?: string | null
    isAdmin?: boolean
    token?: string | null
  }

  export type UsuarioUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AsignacionCreateInput = {
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activo: ActivoCreateNestedOneWithoutAsignacionesInput
    usuario: UsuarioCreateNestedOneWithoutAsignacionesInput
    departamento?: DepartamentoCreateNestedOneWithoutAsignacionesInput
    personal?: PersonalCreateNestedOneWithoutAsignacionesInput
  }

  export type AsignacionUncheckedCreateInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activoId: number
    usuarioId: number
    departamentoId?: number | null
    personalId?: number | null
  }

  export type AsignacionUpdateInput = {
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activo?: ActivoUpdateOneRequiredWithoutAsignacionesNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutAsignacionesNestedInput
    departamento?: DepartamentoUpdateOneWithoutAsignacionesNestedInput
    personal?: PersonalUpdateOneWithoutAsignacionesNestedInput
  }

  export type AsignacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    personalId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsignacionCreateManyInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activoId: number
    usuarioId: number
    departamentoId?: number | null
    personalId?: number | null
  }

  export type AsignacionUpdateManyMutationInput = {
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
  }

  export type AsignacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    personalId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DepartamentoCreateInput = {
    nombre: string
    personal?: PersonalCreateNestedManyWithoutDepartamentoInput
    asignaciones?: AsignacionCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoUncheckedCreateInput = {
    id?: number
    nombre: string
    personal?: PersonalUncheckedCreateNestedManyWithoutDepartamentoInput
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    personal?: PersonalUpdateManyWithoutDepartamentoNestedInput
    asignaciones?: AsignacionUpdateManyWithoutDepartamentoNestedInput
  }

  export type DepartamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    personal?: PersonalUncheckedUpdateManyWithoutDepartamentoNestedInput
    asignaciones?: AsignacionUncheckedUpdateManyWithoutDepartamentoNestedInput
  }

  export type DepartamentoCreateManyInput = {
    id?: number
    nombre: string
  }

  export type DepartamentoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type DepartamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalCreateInput = {
    rut: string
    nombre: string
    apellidoMaterno: string
    apellidoPaterno: string
    departamento: DepartamentoCreateNestedOneWithoutPersonalInput
    asignaciones?: AsignacionCreateNestedManyWithoutPersonalInput
  }

  export type PersonalUncheckedCreateInput = {
    id?: number
    rut: string
    nombre: string
    apellidoMaterno: string
    apellidoPaterno: string
    departamentoId: number
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutPersonalInput
  }

  export type PersonalUpdateInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidoMaterno?: StringFieldUpdateOperationsInput | string
    apellidoPaterno?: StringFieldUpdateOperationsInput | string
    departamento?: DepartamentoUpdateOneRequiredWithoutPersonalNestedInput
    asignaciones?: AsignacionUpdateManyWithoutPersonalNestedInput
  }

  export type PersonalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidoMaterno?: StringFieldUpdateOperationsInput | string
    apellidoPaterno?: StringFieldUpdateOperationsInput | string
    departamentoId?: IntFieldUpdateOperationsInput | number
    asignaciones?: AsignacionUncheckedUpdateManyWithoutPersonalNestedInput
  }

  export type PersonalCreateManyInput = {
    id?: number
    rut: string
    nombre: string
    apellidoMaterno: string
    apellidoPaterno: string
    departamentoId: number
  }

  export type PersonalUpdateManyMutationInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidoMaterno?: StringFieldUpdateOperationsInput | string
    apellidoPaterno?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidoMaterno?: StringFieldUpdateOperationsInput | string
    apellidoPaterno?: StringFieldUpdateOperationsInput | string
    departamentoId?: IntFieldUpdateOperationsInput | number
  }

  export type MantenimientoCreateInput = {
    fechas: Date | string
    tipo: string
    observacion: string
    activo: ActivoCreateNestedOneWithoutMantenimientosInput
  }

  export type MantenimientoUncheckedCreateInput = {
    id?: number
    fechas: Date | string
    tipo: string
    observacion: string
    activoId: number
  }

  export type MantenimientoUpdateInput = {
    fechas?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: StringFieldUpdateOperationsInput | string
    observacion?: StringFieldUpdateOperationsInput | string
    activo?: ActivoUpdateOneRequiredWithoutMantenimientosNestedInput
  }

  export type MantenimientoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechas?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: StringFieldUpdateOperationsInput | string
    observacion?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
  }

  export type MantenimientoCreateManyInput = {
    id?: number
    fechas: Date | string
    tipo: string
    observacion: string
    activoId: number
  }

  export type MantenimientoUpdateManyMutationInput = {
    fechas?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: StringFieldUpdateOperationsInput | string
    observacion?: StringFieldUpdateOperationsInput | string
  }

  export type MantenimientoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechas?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: StringFieldUpdateOperationsInput | string
    observacion?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
  }

  export type AuditoriaCreateInput = {
    fecha: Date | string
    hallazgo: string
    activo: ActivoCreateNestedOneWithoutAuditoriasInput
  }

  export type AuditoriaUncheckedCreateInput = {
    id?: number
    fecha: Date | string
    hallazgo: string
    activoId: number
  }

  export type AuditoriaUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hallazgo?: StringFieldUpdateOperationsInput | string
    activo?: ActivoUpdateOneRequiredWithoutAuditoriasNestedInput
  }

  export type AuditoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hallazgo?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
  }

  export type AuditoriaCreateManyInput = {
    id?: number
    fecha: Date | string
    hallazgo: string
    activoId: number
  }

  export type AuditoriaUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hallazgo?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hallazgo?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
  }

  export type ActivoCreateInput = {
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date | string
    asignaciones?: AsignacionCreateNestedManyWithoutActivoInput
    mantenimientos?: MantenimientoCreateNestedManyWithoutActivoInput
    auditorias?: AuditoriaCreateNestedManyWithoutActivoInput
  }

  export type ActivoUncheckedCreateInput = {
    id?: number
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date | string
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutActivoInput
    mantenimientos?: MantenimientoUncheckedCreateNestedManyWithoutActivoInput
    auditorias?: AuditoriaUncheckedCreateNestedManyWithoutActivoInput
  }

  export type ActivoUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
    asignaciones?: AsignacionUpdateManyWithoutActivoNestedInput
    mantenimientos?: MantenimientoUpdateManyWithoutActivoNestedInput
    auditorias?: AuditoriaUpdateManyWithoutActivoNestedInput
  }

  export type ActivoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
    asignaciones?: AsignacionUncheckedUpdateManyWithoutActivoNestedInput
    mantenimientos?: MantenimientoUncheckedUpdateManyWithoutActivoNestedInput
    auditorias?: AuditoriaUncheckedUpdateManyWithoutActivoNestedInput
  }

  export type ActivoCreateManyInput = {
    id?: number
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date | string
  }

  export type ActivoUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AsignacionListRelationFilter = {
    every?: AsignacionWhereInput
    some?: AsignacionWhereInput
    none?: AsignacionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AsignacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    isAdmin?: SortOrder
    token?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    isAdmin?: SortOrder
    token?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    isAdmin?: SortOrder
    token?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ActivoScalarRelationFilter = {
    is?: ActivoWhereInput
    isNot?: ActivoWhereInput
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type DepartamentoNullableScalarRelationFilter = {
    is?: DepartamentoWhereInput | null
    isNot?: DepartamentoWhereInput | null
  }

  export type PersonalNullableScalarRelationFilter = {
    is?: PersonalWhereInput | null
    isNot?: PersonalWhereInput | null
  }

  export type AsignacionCountOrderByAggregateInput = {
    id?: SortOrder
    fechaAsignacion?: SortOrder
    fechaDevolucion?: SortOrder
    responsable?: SortOrder
    activoId?: SortOrder
    usuarioId?: SortOrder
    departamentoId?: SortOrder
    personalId?: SortOrder
  }

  export type AsignacionAvgOrderByAggregateInput = {
    id?: SortOrder
    activoId?: SortOrder
    usuarioId?: SortOrder
    departamentoId?: SortOrder
    personalId?: SortOrder
  }

  export type AsignacionMaxOrderByAggregateInput = {
    id?: SortOrder
    fechaAsignacion?: SortOrder
    fechaDevolucion?: SortOrder
    responsable?: SortOrder
    activoId?: SortOrder
    usuarioId?: SortOrder
    departamentoId?: SortOrder
    personalId?: SortOrder
  }

  export type AsignacionMinOrderByAggregateInput = {
    id?: SortOrder
    fechaAsignacion?: SortOrder
    fechaDevolucion?: SortOrder
    responsable?: SortOrder
    activoId?: SortOrder
    usuarioId?: SortOrder
    departamentoId?: SortOrder
    personalId?: SortOrder
  }

  export type AsignacionSumOrderByAggregateInput = {
    id?: SortOrder
    activoId?: SortOrder
    usuarioId?: SortOrder
    departamentoId?: SortOrder
    personalId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type PersonalListRelationFilter = {
    every?: PersonalWhereInput
    some?: PersonalWhereInput
    none?: PersonalWhereInput
  }

  export type PersonalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartamentoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type DepartamentoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type DepartamentoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type DepartamentoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartamentoScalarRelationFilter = {
    is?: DepartamentoWhereInput
    isNot?: DepartamentoWhereInput
  }

  export type PersonalCountOrderByAggregateInput = {
    id?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    apellidoMaterno?: SortOrder
    apellidoPaterno?: SortOrder
    departamentoId?: SortOrder
  }

  export type PersonalAvgOrderByAggregateInput = {
    id?: SortOrder
    departamentoId?: SortOrder
  }

  export type PersonalMaxOrderByAggregateInput = {
    id?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    apellidoMaterno?: SortOrder
    apellidoPaterno?: SortOrder
    departamentoId?: SortOrder
  }

  export type PersonalMinOrderByAggregateInput = {
    id?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    apellidoMaterno?: SortOrder
    apellidoPaterno?: SortOrder
    departamentoId?: SortOrder
  }

  export type PersonalSumOrderByAggregateInput = {
    id?: SortOrder
    departamentoId?: SortOrder
  }

  export type MantenimientoCountOrderByAggregateInput = {
    id?: SortOrder
    fechas?: SortOrder
    tipo?: SortOrder
    observacion?: SortOrder
    activoId?: SortOrder
  }

  export type MantenimientoAvgOrderByAggregateInput = {
    id?: SortOrder
    activoId?: SortOrder
  }

  export type MantenimientoMaxOrderByAggregateInput = {
    id?: SortOrder
    fechas?: SortOrder
    tipo?: SortOrder
    observacion?: SortOrder
    activoId?: SortOrder
  }

  export type MantenimientoMinOrderByAggregateInput = {
    id?: SortOrder
    fechas?: SortOrder
    tipo?: SortOrder
    observacion?: SortOrder
    activoId?: SortOrder
  }

  export type MantenimientoSumOrderByAggregateInput = {
    id?: SortOrder
    activoId?: SortOrder
  }

  export type AuditoriaCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    hallazgo?: SortOrder
    activoId?: SortOrder
  }

  export type AuditoriaAvgOrderByAggregateInput = {
    id?: SortOrder
    activoId?: SortOrder
  }

  export type AuditoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    hallazgo?: SortOrder
    activoId?: SortOrder
  }

  export type AuditoriaMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    hallazgo?: SortOrder
    activoId?: SortOrder
  }

  export type AuditoriaSumOrderByAggregateInput = {
    id?: SortOrder
    activoId?: SortOrder
  }

  export type MantenimientoListRelationFilter = {
    every?: MantenimientoWhereInput
    some?: MantenimientoWhereInput
    none?: MantenimientoWhereInput
  }

  export type AuditoriaListRelationFilter = {
    every?: AuditoriaWhereInput
    some?: AuditoriaWhereInput
    none?: AuditoriaWhereInput
  }

  export type MantenimientoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivoCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    estado?: SortOrder
    ubicacion?: SortOrder
    numeroSerie?: SortOrder
    fechaAdquisicion?: SortOrder
  }

  export type ActivoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ActivoMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    estado?: SortOrder
    ubicacion?: SortOrder
    numeroSerie?: SortOrder
    fechaAdquisicion?: SortOrder
  }

  export type ActivoMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    estado?: SortOrder
    ubicacion?: SortOrder
    numeroSerie?: SortOrder
    fechaAdquisicion?: SortOrder
  }

  export type ActivoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AsignacionCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AsignacionCreateWithoutUsuarioInput, AsignacionUncheckedCreateWithoutUsuarioInput> | AsignacionCreateWithoutUsuarioInput[] | AsignacionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutUsuarioInput | AsignacionCreateOrConnectWithoutUsuarioInput[]
    createMany?: AsignacionCreateManyUsuarioInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type AsignacionUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AsignacionCreateWithoutUsuarioInput, AsignacionUncheckedCreateWithoutUsuarioInput> | AsignacionCreateWithoutUsuarioInput[] | AsignacionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutUsuarioInput | AsignacionCreateOrConnectWithoutUsuarioInput[]
    createMany?: AsignacionCreateManyUsuarioInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AsignacionUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AsignacionCreateWithoutUsuarioInput, AsignacionUncheckedCreateWithoutUsuarioInput> | AsignacionCreateWithoutUsuarioInput[] | AsignacionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutUsuarioInput | AsignacionCreateOrConnectWithoutUsuarioInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutUsuarioInput | AsignacionUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AsignacionCreateManyUsuarioInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutUsuarioInput | AsignacionUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutUsuarioInput | AsignacionUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AsignacionUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AsignacionCreateWithoutUsuarioInput, AsignacionUncheckedCreateWithoutUsuarioInput> | AsignacionCreateWithoutUsuarioInput[] | AsignacionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutUsuarioInput | AsignacionCreateOrConnectWithoutUsuarioInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutUsuarioInput | AsignacionUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AsignacionCreateManyUsuarioInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutUsuarioInput | AsignacionUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutUsuarioInput | AsignacionUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type ActivoCreateNestedOneWithoutAsignacionesInput = {
    create?: XOR<ActivoCreateWithoutAsignacionesInput, ActivoUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: ActivoCreateOrConnectWithoutAsignacionesInput
    connect?: ActivoWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutAsignacionesInput = {
    create?: XOR<UsuarioCreateWithoutAsignacionesInput, UsuarioUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAsignacionesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DepartamentoCreateNestedOneWithoutAsignacionesInput = {
    create?: XOR<DepartamentoCreateWithoutAsignacionesInput, DepartamentoUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: DepartamentoCreateOrConnectWithoutAsignacionesInput
    connect?: DepartamentoWhereUniqueInput
  }

  export type PersonalCreateNestedOneWithoutAsignacionesInput = {
    create?: XOR<PersonalCreateWithoutAsignacionesInput, PersonalUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: PersonalCreateOrConnectWithoutAsignacionesInput
    connect?: PersonalWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ActivoUpdateOneRequiredWithoutAsignacionesNestedInput = {
    create?: XOR<ActivoCreateWithoutAsignacionesInput, ActivoUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: ActivoCreateOrConnectWithoutAsignacionesInput
    upsert?: ActivoUpsertWithoutAsignacionesInput
    connect?: ActivoWhereUniqueInput
    update?: XOR<XOR<ActivoUpdateToOneWithWhereWithoutAsignacionesInput, ActivoUpdateWithoutAsignacionesInput>, ActivoUncheckedUpdateWithoutAsignacionesInput>
  }

  export type UsuarioUpdateOneRequiredWithoutAsignacionesNestedInput = {
    create?: XOR<UsuarioCreateWithoutAsignacionesInput, UsuarioUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAsignacionesInput
    upsert?: UsuarioUpsertWithoutAsignacionesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutAsignacionesInput, UsuarioUpdateWithoutAsignacionesInput>, UsuarioUncheckedUpdateWithoutAsignacionesInput>
  }

  export type DepartamentoUpdateOneWithoutAsignacionesNestedInput = {
    create?: XOR<DepartamentoCreateWithoutAsignacionesInput, DepartamentoUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: DepartamentoCreateOrConnectWithoutAsignacionesInput
    upsert?: DepartamentoUpsertWithoutAsignacionesInput
    disconnect?: DepartamentoWhereInput | boolean
    delete?: DepartamentoWhereInput | boolean
    connect?: DepartamentoWhereUniqueInput
    update?: XOR<XOR<DepartamentoUpdateToOneWithWhereWithoutAsignacionesInput, DepartamentoUpdateWithoutAsignacionesInput>, DepartamentoUncheckedUpdateWithoutAsignacionesInput>
  }

  export type PersonalUpdateOneWithoutAsignacionesNestedInput = {
    create?: XOR<PersonalCreateWithoutAsignacionesInput, PersonalUncheckedCreateWithoutAsignacionesInput>
    connectOrCreate?: PersonalCreateOrConnectWithoutAsignacionesInput
    upsert?: PersonalUpsertWithoutAsignacionesInput
    disconnect?: PersonalWhereInput | boolean
    delete?: PersonalWhereInput | boolean
    connect?: PersonalWhereUniqueInput
    update?: XOR<XOR<PersonalUpdateToOneWithWhereWithoutAsignacionesInput, PersonalUpdateWithoutAsignacionesInput>, PersonalUncheckedUpdateWithoutAsignacionesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PersonalCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<PersonalCreateWithoutDepartamentoInput, PersonalUncheckedCreateWithoutDepartamentoInput> | PersonalCreateWithoutDepartamentoInput[] | PersonalUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: PersonalCreateOrConnectWithoutDepartamentoInput | PersonalCreateOrConnectWithoutDepartamentoInput[]
    createMany?: PersonalCreateManyDepartamentoInputEnvelope
    connect?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
  }

  export type AsignacionCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<AsignacionCreateWithoutDepartamentoInput, AsignacionUncheckedCreateWithoutDepartamentoInput> | AsignacionCreateWithoutDepartamentoInput[] | AsignacionUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutDepartamentoInput | AsignacionCreateOrConnectWithoutDepartamentoInput[]
    createMany?: AsignacionCreateManyDepartamentoInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type PersonalUncheckedCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<PersonalCreateWithoutDepartamentoInput, PersonalUncheckedCreateWithoutDepartamentoInput> | PersonalCreateWithoutDepartamentoInput[] | PersonalUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: PersonalCreateOrConnectWithoutDepartamentoInput | PersonalCreateOrConnectWithoutDepartamentoInput[]
    createMany?: PersonalCreateManyDepartamentoInputEnvelope
    connect?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
  }

  export type AsignacionUncheckedCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<AsignacionCreateWithoutDepartamentoInput, AsignacionUncheckedCreateWithoutDepartamentoInput> | AsignacionCreateWithoutDepartamentoInput[] | AsignacionUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutDepartamentoInput | AsignacionCreateOrConnectWithoutDepartamentoInput[]
    createMany?: AsignacionCreateManyDepartamentoInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type PersonalUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<PersonalCreateWithoutDepartamentoInput, PersonalUncheckedCreateWithoutDepartamentoInput> | PersonalCreateWithoutDepartamentoInput[] | PersonalUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: PersonalCreateOrConnectWithoutDepartamentoInput | PersonalCreateOrConnectWithoutDepartamentoInput[]
    upsert?: PersonalUpsertWithWhereUniqueWithoutDepartamentoInput | PersonalUpsertWithWhereUniqueWithoutDepartamentoInput[]
    createMany?: PersonalCreateManyDepartamentoInputEnvelope
    set?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
    disconnect?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
    delete?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
    connect?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
    update?: PersonalUpdateWithWhereUniqueWithoutDepartamentoInput | PersonalUpdateWithWhereUniqueWithoutDepartamentoInput[]
    updateMany?: PersonalUpdateManyWithWhereWithoutDepartamentoInput | PersonalUpdateManyWithWhereWithoutDepartamentoInput[]
    deleteMany?: PersonalScalarWhereInput | PersonalScalarWhereInput[]
  }

  export type AsignacionUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<AsignacionCreateWithoutDepartamentoInput, AsignacionUncheckedCreateWithoutDepartamentoInput> | AsignacionCreateWithoutDepartamentoInput[] | AsignacionUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutDepartamentoInput | AsignacionCreateOrConnectWithoutDepartamentoInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutDepartamentoInput | AsignacionUpsertWithWhereUniqueWithoutDepartamentoInput[]
    createMany?: AsignacionCreateManyDepartamentoInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutDepartamentoInput | AsignacionUpdateWithWhereUniqueWithoutDepartamentoInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutDepartamentoInput | AsignacionUpdateManyWithWhereWithoutDepartamentoInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type PersonalUncheckedUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<PersonalCreateWithoutDepartamentoInput, PersonalUncheckedCreateWithoutDepartamentoInput> | PersonalCreateWithoutDepartamentoInput[] | PersonalUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: PersonalCreateOrConnectWithoutDepartamentoInput | PersonalCreateOrConnectWithoutDepartamentoInput[]
    upsert?: PersonalUpsertWithWhereUniqueWithoutDepartamentoInput | PersonalUpsertWithWhereUniqueWithoutDepartamentoInput[]
    createMany?: PersonalCreateManyDepartamentoInputEnvelope
    set?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
    disconnect?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
    delete?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
    connect?: PersonalWhereUniqueInput | PersonalWhereUniqueInput[]
    update?: PersonalUpdateWithWhereUniqueWithoutDepartamentoInput | PersonalUpdateWithWhereUniqueWithoutDepartamentoInput[]
    updateMany?: PersonalUpdateManyWithWhereWithoutDepartamentoInput | PersonalUpdateManyWithWhereWithoutDepartamentoInput[]
    deleteMany?: PersonalScalarWhereInput | PersonalScalarWhereInput[]
  }

  export type AsignacionUncheckedUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<AsignacionCreateWithoutDepartamentoInput, AsignacionUncheckedCreateWithoutDepartamentoInput> | AsignacionCreateWithoutDepartamentoInput[] | AsignacionUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutDepartamentoInput | AsignacionCreateOrConnectWithoutDepartamentoInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutDepartamentoInput | AsignacionUpsertWithWhereUniqueWithoutDepartamentoInput[]
    createMany?: AsignacionCreateManyDepartamentoInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutDepartamentoInput | AsignacionUpdateWithWhereUniqueWithoutDepartamentoInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutDepartamentoInput | AsignacionUpdateManyWithWhereWithoutDepartamentoInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type DepartamentoCreateNestedOneWithoutPersonalInput = {
    create?: XOR<DepartamentoCreateWithoutPersonalInput, DepartamentoUncheckedCreateWithoutPersonalInput>
    connectOrCreate?: DepartamentoCreateOrConnectWithoutPersonalInput
    connect?: DepartamentoWhereUniqueInput
  }

  export type AsignacionCreateNestedManyWithoutPersonalInput = {
    create?: XOR<AsignacionCreateWithoutPersonalInput, AsignacionUncheckedCreateWithoutPersonalInput> | AsignacionCreateWithoutPersonalInput[] | AsignacionUncheckedCreateWithoutPersonalInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutPersonalInput | AsignacionCreateOrConnectWithoutPersonalInput[]
    createMany?: AsignacionCreateManyPersonalInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type AsignacionUncheckedCreateNestedManyWithoutPersonalInput = {
    create?: XOR<AsignacionCreateWithoutPersonalInput, AsignacionUncheckedCreateWithoutPersonalInput> | AsignacionCreateWithoutPersonalInput[] | AsignacionUncheckedCreateWithoutPersonalInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutPersonalInput | AsignacionCreateOrConnectWithoutPersonalInput[]
    createMany?: AsignacionCreateManyPersonalInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type DepartamentoUpdateOneRequiredWithoutPersonalNestedInput = {
    create?: XOR<DepartamentoCreateWithoutPersonalInput, DepartamentoUncheckedCreateWithoutPersonalInput>
    connectOrCreate?: DepartamentoCreateOrConnectWithoutPersonalInput
    upsert?: DepartamentoUpsertWithoutPersonalInput
    connect?: DepartamentoWhereUniqueInput
    update?: XOR<XOR<DepartamentoUpdateToOneWithWhereWithoutPersonalInput, DepartamentoUpdateWithoutPersonalInput>, DepartamentoUncheckedUpdateWithoutPersonalInput>
  }

  export type AsignacionUpdateManyWithoutPersonalNestedInput = {
    create?: XOR<AsignacionCreateWithoutPersonalInput, AsignacionUncheckedCreateWithoutPersonalInput> | AsignacionCreateWithoutPersonalInput[] | AsignacionUncheckedCreateWithoutPersonalInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutPersonalInput | AsignacionCreateOrConnectWithoutPersonalInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutPersonalInput | AsignacionUpsertWithWhereUniqueWithoutPersonalInput[]
    createMany?: AsignacionCreateManyPersonalInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutPersonalInput | AsignacionUpdateWithWhereUniqueWithoutPersonalInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutPersonalInput | AsignacionUpdateManyWithWhereWithoutPersonalInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type AsignacionUncheckedUpdateManyWithoutPersonalNestedInput = {
    create?: XOR<AsignacionCreateWithoutPersonalInput, AsignacionUncheckedCreateWithoutPersonalInput> | AsignacionCreateWithoutPersonalInput[] | AsignacionUncheckedCreateWithoutPersonalInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutPersonalInput | AsignacionCreateOrConnectWithoutPersonalInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutPersonalInput | AsignacionUpsertWithWhereUniqueWithoutPersonalInput[]
    createMany?: AsignacionCreateManyPersonalInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutPersonalInput | AsignacionUpdateWithWhereUniqueWithoutPersonalInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutPersonalInput | AsignacionUpdateManyWithWhereWithoutPersonalInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type ActivoCreateNestedOneWithoutMantenimientosInput = {
    create?: XOR<ActivoCreateWithoutMantenimientosInput, ActivoUncheckedCreateWithoutMantenimientosInput>
    connectOrCreate?: ActivoCreateOrConnectWithoutMantenimientosInput
    connect?: ActivoWhereUniqueInput
  }

  export type ActivoUpdateOneRequiredWithoutMantenimientosNestedInput = {
    create?: XOR<ActivoCreateWithoutMantenimientosInput, ActivoUncheckedCreateWithoutMantenimientosInput>
    connectOrCreate?: ActivoCreateOrConnectWithoutMantenimientosInput
    upsert?: ActivoUpsertWithoutMantenimientosInput
    connect?: ActivoWhereUniqueInput
    update?: XOR<XOR<ActivoUpdateToOneWithWhereWithoutMantenimientosInput, ActivoUpdateWithoutMantenimientosInput>, ActivoUncheckedUpdateWithoutMantenimientosInput>
  }

  export type ActivoCreateNestedOneWithoutAuditoriasInput = {
    create?: XOR<ActivoCreateWithoutAuditoriasInput, ActivoUncheckedCreateWithoutAuditoriasInput>
    connectOrCreate?: ActivoCreateOrConnectWithoutAuditoriasInput
    connect?: ActivoWhereUniqueInput
  }

  export type ActivoUpdateOneRequiredWithoutAuditoriasNestedInput = {
    create?: XOR<ActivoCreateWithoutAuditoriasInput, ActivoUncheckedCreateWithoutAuditoriasInput>
    connectOrCreate?: ActivoCreateOrConnectWithoutAuditoriasInput
    upsert?: ActivoUpsertWithoutAuditoriasInput
    connect?: ActivoWhereUniqueInput
    update?: XOR<XOR<ActivoUpdateToOneWithWhereWithoutAuditoriasInput, ActivoUpdateWithoutAuditoriasInput>, ActivoUncheckedUpdateWithoutAuditoriasInput>
  }

  export type AsignacionCreateNestedManyWithoutActivoInput = {
    create?: XOR<AsignacionCreateWithoutActivoInput, AsignacionUncheckedCreateWithoutActivoInput> | AsignacionCreateWithoutActivoInput[] | AsignacionUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutActivoInput | AsignacionCreateOrConnectWithoutActivoInput[]
    createMany?: AsignacionCreateManyActivoInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type MantenimientoCreateNestedManyWithoutActivoInput = {
    create?: XOR<MantenimientoCreateWithoutActivoInput, MantenimientoUncheckedCreateWithoutActivoInput> | MantenimientoCreateWithoutActivoInput[] | MantenimientoUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: MantenimientoCreateOrConnectWithoutActivoInput | MantenimientoCreateOrConnectWithoutActivoInput[]
    createMany?: MantenimientoCreateManyActivoInputEnvelope
    connect?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
  }

  export type AuditoriaCreateNestedManyWithoutActivoInput = {
    create?: XOR<AuditoriaCreateWithoutActivoInput, AuditoriaUncheckedCreateWithoutActivoInput> | AuditoriaCreateWithoutActivoInput[] | AuditoriaUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: AuditoriaCreateOrConnectWithoutActivoInput | AuditoriaCreateOrConnectWithoutActivoInput[]
    createMany?: AuditoriaCreateManyActivoInputEnvelope
    connect?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
  }

  export type AsignacionUncheckedCreateNestedManyWithoutActivoInput = {
    create?: XOR<AsignacionCreateWithoutActivoInput, AsignacionUncheckedCreateWithoutActivoInput> | AsignacionCreateWithoutActivoInput[] | AsignacionUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutActivoInput | AsignacionCreateOrConnectWithoutActivoInput[]
    createMany?: AsignacionCreateManyActivoInputEnvelope
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
  }

  export type MantenimientoUncheckedCreateNestedManyWithoutActivoInput = {
    create?: XOR<MantenimientoCreateWithoutActivoInput, MantenimientoUncheckedCreateWithoutActivoInput> | MantenimientoCreateWithoutActivoInput[] | MantenimientoUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: MantenimientoCreateOrConnectWithoutActivoInput | MantenimientoCreateOrConnectWithoutActivoInput[]
    createMany?: MantenimientoCreateManyActivoInputEnvelope
    connect?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
  }

  export type AuditoriaUncheckedCreateNestedManyWithoutActivoInput = {
    create?: XOR<AuditoriaCreateWithoutActivoInput, AuditoriaUncheckedCreateWithoutActivoInput> | AuditoriaCreateWithoutActivoInput[] | AuditoriaUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: AuditoriaCreateOrConnectWithoutActivoInput | AuditoriaCreateOrConnectWithoutActivoInput[]
    createMany?: AuditoriaCreateManyActivoInputEnvelope
    connect?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
  }

  export type AsignacionUpdateManyWithoutActivoNestedInput = {
    create?: XOR<AsignacionCreateWithoutActivoInput, AsignacionUncheckedCreateWithoutActivoInput> | AsignacionCreateWithoutActivoInput[] | AsignacionUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutActivoInput | AsignacionCreateOrConnectWithoutActivoInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutActivoInput | AsignacionUpsertWithWhereUniqueWithoutActivoInput[]
    createMany?: AsignacionCreateManyActivoInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutActivoInput | AsignacionUpdateWithWhereUniqueWithoutActivoInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutActivoInput | AsignacionUpdateManyWithWhereWithoutActivoInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type MantenimientoUpdateManyWithoutActivoNestedInput = {
    create?: XOR<MantenimientoCreateWithoutActivoInput, MantenimientoUncheckedCreateWithoutActivoInput> | MantenimientoCreateWithoutActivoInput[] | MantenimientoUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: MantenimientoCreateOrConnectWithoutActivoInput | MantenimientoCreateOrConnectWithoutActivoInput[]
    upsert?: MantenimientoUpsertWithWhereUniqueWithoutActivoInput | MantenimientoUpsertWithWhereUniqueWithoutActivoInput[]
    createMany?: MantenimientoCreateManyActivoInputEnvelope
    set?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
    disconnect?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
    delete?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
    connect?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
    update?: MantenimientoUpdateWithWhereUniqueWithoutActivoInput | MantenimientoUpdateWithWhereUniqueWithoutActivoInput[]
    updateMany?: MantenimientoUpdateManyWithWhereWithoutActivoInput | MantenimientoUpdateManyWithWhereWithoutActivoInput[]
    deleteMany?: MantenimientoScalarWhereInput | MantenimientoScalarWhereInput[]
  }

  export type AuditoriaUpdateManyWithoutActivoNestedInput = {
    create?: XOR<AuditoriaCreateWithoutActivoInput, AuditoriaUncheckedCreateWithoutActivoInput> | AuditoriaCreateWithoutActivoInput[] | AuditoriaUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: AuditoriaCreateOrConnectWithoutActivoInput | AuditoriaCreateOrConnectWithoutActivoInput[]
    upsert?: AuditoriaUpsertWithWhereUniqueWithoutActivoInput | AuditoriaUpsertWithWhereUniqueWithoutActivoInput[]
    createMany?: AuditoriaCreateManyActivoInputEnvelope
    set?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
    disconnect?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
    delete?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
    connect?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
    update?: AuditoriaUpdateWithWhereUniqueWithoutActivoInput | AuditoriaUpdateWithWhereUniqueWithoutActivoInput[]
    updateMany?: AuditoriaUpdateManyWithWhereWithoutActivoInput | AuditoriaUpdateManyWithWhereWithoutActivoInput[]
    deleteMany?: AuditoriaScalarWhereInput | AuditoriaScalarWhereInput[]
  }

  export type AsignacionUncheckedUpdateManyWithoutActivoNestedInput = {
    create?: XOR<AsignacionCreateWithoutActivoInput, AsignacionUncheckedCreateWithoutActivoInput> | AsignacionCreateWithoutActivoInput[] | AsignacionUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: AsignacionCreateOrConnectWithoutActivoInput | AsignacionCreateOrConnectWithoutActivoInput[]
    upsert?: AsignacionUpsertWithWhereUniqueWithoutActivoInput | AsignacionUpsertWithWhereUniqueWithoutActivoInput[]
    createMany?: AsignacionCreateManyActivoInputEnvelope
    set?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    disconnect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    delete?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    connect?: AsignacionWhereUniqueInput | AsignacionWhereUniqueInput[]
    update?: AsignacionUpdateWithWhereUniqueWithoutActivoInput | AsignacionUpdateWithWhereUniqueWithoutActivoInput[]
    updateMany?: AsignacionUpdateManyWithWhereWithoutActivoInput | AsignacionUpdateManyWithWhereWithoutActivoInput[]
    deleteMany?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
  }

  export type MantenimientoUncheckedUpdateManyWithoutActivoNestedInput = {
    create?: XOR<MantenimientoCreateWithoutActivoInput, MantenimientoUncheckedCreateWithoutActivoInput> | MantenimientoCreateWithoutActivoInput[] | MantenimientoUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: MantenimientoCreateOrConnectWithoutActivoInput | MantenimientoCreateOrConnectWithoutActivoInput[]
    upsert?: MantenimientoUpsertWithWhereUniqueWithoutActivoInput | MantenimientoUpsertWithWhereUniqueWithoutActivoInput[]
    createMany?: MantenimientoCreateManyActivoInputEnvelope
    set?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
    disconnect?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
    delete?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
    connect?: MantenimientoWhereUniqueInput | MantenimientoWhereUniqueInput[]
    update?: MantenimientoUpdateWithWhereUniqueWithoutActivoInput | MantenimientoUpdateWithWhereUniqueWithoutActivoInput[]
    updateMany?: MantenimientoUpdateManyWithWhereWithoutActivoInput | MantenimientoUpdateManyWithWhereWithoutActivoInput[]
    deleteMany?: MantenimientoScalarWhereInput | MantenimientoScalarWhereInput[]
  }

  export type AuditoriaUncheckedUpdateManyWithoutActivoNestedInput = {
    create?: XOR<AuditoriaCreateWithoutActivoInput, AuditoriaUncheckedCreateWithoutActivoInput> | AuditoriaCreateWithoutActivoInput[] | AuditoriaUncheckedCreateWithoutActivoInput[]
    connectOrCreate?: AuditoriaCreateOrConnectWithoutActivoInput | AuditoriaCreateOrConnectWithoutActivoInput[]
    upsert?: AuditoriaUpsertWithWhereUniqueWithoutActivoInput | AuditoriaUpsertWithWhereUniqueWithoutActivoInput[]
    createMany?: AuditoriaCreateManyActivoInputEnvelope
    set?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
    disconnect?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
    delete?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
    connect?: AuditoriaWhereUniqueInput | AuditoriaWhereUniqueInput[]
    update?: AuditoriaUpdateWithWhereUniqueWithoutActivoInput | AuditoriaUpdateWithWhereUniqueWithoutActivoInput[]
    updateMany?: AuditoriaUpdateManyWithWhereWithoutActivoInput | AuditoriaUpdateManyWithWhereWithoutActivoInput[]
    deleteMany?: AuditoriaScalarWhereInput | AuditoriaScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AsignacionCreateWithoutUsuarioInput = {
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activo: ActivoCreateNestedOneWithoutAsignacionesInput
    departamento?: DepartamentoCreateNestedOneWithoutAsignacionesInput
    personal?: PersonalCreateNestedOneWithoutAsignacionesInput
  }

  export type AsignacionUncheckedCreateWithoutUsuarioInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activoId: number
    departamentoId?: number | null
    personalId?: number | null
  }

  export type AsignacionCreateOrConnectWithoutUsuarioInput = {
    where: AsignacionWhereUniqueInput
    create: XOR<AsignacionCreateWithoutUsuarioInput, AsignacionUncheckedCreateWithoutUsuarioInput>
  }

  export type AsignacionCreateManyUsuarioInputEnvelope = {
    data: AsignacionCreateManyUsuarioInput | AsignacionCreateManyUsuarioInput[]
  }

  export type AsignacionUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: AsignacionWhereUniqueInput
    update: XOR<AsignacionUpdateWithoutUsuarioInput, AsignacionUncheckedUpdateWithoutUsuarioInput>
    create: XOR<AsignacionCreateWithoutUsuarioInput, AsignacionUncheckedCreateWithoutUsuarioInput>
  }

  export type AsignacionUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: AsignacionWhereUniqueInput
    data: XOR<AsignacionUpdateWithoutUsuarioInput, AsignacionUncheckedUpdateWithoutUsuarioInput>
  }

  export type AsignacionUpdateManyWithWhereWithoutUsuarioInput = {
    where: AsignacionScalarWhereInput
    data: XOR<AsignacionUpdateManyMutationInput, AsignacionUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type AsignacionScalarWhereInput = {
    AND?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
    OR?: AsignacionScalarWhereInput[]
    NOT?: AsignacionScalarWhereInput | AsignacionScalarWhereInput[]
    id?: IntFilter<"Asignacion"> | number
    fechaAsignacion?: DateTimeFilter<"Asignacion"> | Date | string
    fechaDevolucion?: DateTimeNullableFilter<"Asignacion"> | Date | string | null
    responsable?: StringFilter<"Asignacion"> | string
    activoId?: IntFilter<"Asignacion"> | number
    usuarioId?: IntFilter<"Asignacion"> | number
    departamentoId?: IntNullableFilter<"Asignacion"> | number | null
    personalId?: IntNullableFilter<"Asignacion"> | number | null
  }

  export type ActivoCreateWithoutAsignacionesInput = {
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date | string
    mantenimientos?: MantenimientoCreateNestedManyWithoutActivoInput
    auditorias?: AuditoriaCreateNestedManyWithoutActivoInput
  }

  export type ActivoUncheckedCreateWithoutAsignacionesInput = {
    id?: number
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date | string
    mantenimientos?: MantenimientoUncheckedCreateNestedManyWithoutActivoInput
    auditorias?: AuditoriaUncheckedCreateNestedManyWithoutActivoInput
  }

  export type ActivoCreateOrConnectWithoutAsignacionesInput = {
    where: ActivoWhereUniqueInput
    create: XOR<ActivoCreateWithoutAsignacionesInput, ActivoUncheckedCreateWithoutAsignacionesInput>
  }

  export type UsuarioCreateWithoutAsignacionesInput = {
    username: string
    password: string
    nombre: string
    descripcion?: string | null
    isAdmin?: boolean
    token?: string | null
  }

  export type UsuarioUncheckedCreateWithoutAsignacionesInput = {
    id?: number
    username: string
    password: string
    nombre: string
    descripcion?: string | null
    isAdmin?: boolean
    token?: string | null
  }

  export type UsuarioCreateOrConnectWithoutAsignacionesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutAsignacionesInput, UsuarioUncheckedCreateWithoutAsignacionesInput>
  }

  export type DepartamentoCreateWithoutAsignacionesInput = {
    nombre: string
    personal?: PersonalCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoUncheckedCreateWithoutAsignacionesInput = {
    id?: number
    nombre: string
    personal?: PersonalUncheckedCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoCreateOrConnectWithoutAsignacionesInput = {
    where: DepartamentoWhereUniqueInput
    create: XOR<DepartamentoCreateWithoutAsignacionesInput, DepartamentoUncheckedCreateWithoutAsignacionesInput>
  }

  export type PersonalCreateWithoutAsignacionesInput = {
    rut: string
    nombre: string
    apellidoMaterno: string
    apellidoPaterno: string
    departamento: DepartamentoCreateNestedOneWithoutPersonalInput
  }

  export type PersonalUncheckedCreateWithoutAsignacionesInput = {
    id?: number
    rut: string
    nombre: string
    apellidoMaterno: string
    apellidoPaterno: string
    departamentoId: number
  }

  export type PersonalCreateOrConnectWithoutAsignacionesInput = {
    where: PersonalWhereUniqueInput
    create: XOR<PersonalCreateWithoutAsignacionesInput, PersonalUncheckedCreateWithoutAsignacionesInput>
  }

  export type ActivoUpsertWithoutAsignacionesInput = {
    update: XOR<ActivoUpdateWithoutAsignacionesInput, ActivoUncheckedUpdateWithoutAsignacionesInput>
    create: XOR<ActivoCreateWithoutAsignacionesInput, ActivoUncheckedCreateWithoutAsignacionesInput>
    where?: ActivoWhereInput
  }

  export type ActivoUpdateToOneWithWhereWithoutAsignacionesInput = {
    where?: ActivoWhereInput
    data: XOR<ActivoUpdateWithoutAsignacionesInput, ActivoUncheckedUpdateWithoutAsignacionesInput>
  }

  export type ActivoUpdateWithoutAsignacionesInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
    mantenimientos?: MantenimientoUpdateManyWithoutActivoNestedInput
    auditorias?: AuditoriaUpdateManyWithoutActivoNestedInput
  }

  export type ActivoUncheckedUpdateWithoutAsignacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
    mantenimientos?: MantenimientoUncheckedUpdateManyWithoutActivoNestedInput
    auditorias?: AuditoriaUncheckedUpdateManyWithoutActivoNestedInput
  }

  export type UsuarioUpsertWithoutAsignacionesInput = {
    update: XOR<UsuarioUpdateWithoutAsignacionesInput, UsuarioUncheckedUpdateWithoutAsignacionesInput>
    create: XOR<UsuarioCreateWithoutAsignacionesInput, UsuarioUncheckedCreateWithoutAsignacionesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutAsignacionesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutAsignacionesInput, UsuarioUncheckedUpdateWithoutAsignacionesInput>
  }

  export type UsuarioUpdateWithoutAsignacionesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuarioUncheckedUpdateWithoutAsignacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartamentoUpsertWithoutAsignacionesInput = {
    update: XOR<DepartamentoUpdateWithoutAsignacionesInput, DepartamentoUncheckedUpdateWithoutAsignacionesInput>
    create: XOR<DepartamentoCreateWithoutAsignacionesInput, DepartamentoUncheckedCreateWithoutAsignacionesInput>
    where?: DepartamentoWhereInput
  }

  export type DepartamentoUpdateToOneWithWhereWithoutAsignacionesInput = {
    where?: DepartamentoWhereInput
    data: XOR<DepartamentoUpdateWithoutAsignacionesInput, DepartamentoUncheckedUpdateWithoutAsignacionesInput>
  }

  export type DepartamentoUpdateWithoutAsignacionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    personal?: PersonalUpdateManyWithoutDepartamentoNestedInput
  }

  export type DepartamentoUncheckedUpdateWithoutAsignacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    personal?: PersonalUncheckedUpdateManyWithoutDepartamentoNestedInput
  }

  export type PersonalUpsertWithoutAsignacionesInput = {
    update: XOR<PersonalUpdateWithoutAsignacionesInput, PersonalUncheckedUpdateWithoutAsignacionesInput>
    create: XOR<PersonalCreateWithoutAsignacionesInput, PersonalUncheckedCreateWithoutAsignacionesInput>
    where?: PersonalWhereInput
  }

  export type PersonalUpdateToOneWithWhereWithoutAsignacionesInput = {
    where?: PersonalWhereInput
    data: XOR<PersonalUpdateWithoutAsignacionesInput, PersonalUncheckedUpdateWithoutAsignacionesInput>
  }

  export type PersonalUpdateWithoutAsignacionesInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidoMaterno?: StringFieldUpdateOperationsInput | string
    apellidoPaterno?: StringFieldUpdateOperationsInput | string
    departamento?: DepartamentoUpdateOneRequiredWithoutPersonalNestedInput
  }

  export type PersonalUncheckedUpdateWithoutAsignacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidoMaterno?: StringFieldUpdateOperationsInput | string
    apellidoPaterno?: StringFieldUpdateOperationsInput | string
    departamentoId?: IntFieldUpdateOperationsInput | number
  }

  export type PersonalCreateWithoutDepartamentoInput = {
    rut: string
    nombre: string
    apellidoMaterno: string
    apellidoPaterno: string
    asignaciones?: AsignacionCreateNestedManyWithoutPersonalInput
  }

  export type PersonalUncheckedCreateWithoutDepartamentoInput = {
    id?: number
    rut: string
    nombre: string
    apellidoMaterno: string
    apellidoPaterno: string
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutPersonalInput
  }

  export type PersonalCreateOrConnectWithoutDepartamentoInput = {
    where: PersonalWhereUniqueInput
    create: XOR<PersonalCreateWithoutDepartamentoInput, PersonalUncheckedCreateWithoutDepartamentoInput>
  }

  export type PersonalCreateManyDepartamentoInputEnvelope = {
    data: PersonalCreateManyDepartamentoInput | PersonalCreateManyDepartamentoInput[]
  }

  export type AsignacionCreateWithoutDepartamentoInput = {
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activo: ActivoCreateNestedOneWithoutAsignacionesInput
    usuario: UsuarioCreateNestedOneWithoutAsignacionesInput
    personal?: PersonalCreateNestedOneWithoutAsignacionesInput
  }

  export type AsignacionUncheckedCreateWithoutDepartamentoInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activoId: number
    usuarioId: number
    personalId?: number | null
  }

  export type AsignacionCreateOrConnectWithoutDepartamentoInput = {
    where: AsignacionWhereUniqueInput
    create: XOR<AsignacionCreateWithoutDepartamentoInput, AsignacionUncheckedCreateWithoutDepartamentoInput>
  }

  export type AsignacionCreateManyDepartamentoInputEnvelope = {
    data: AsignacionCreateManyDepartamentoInput | AsignacionCreateManyDepartamentoInput[]
  }

  export type PersonalUpsertWithWhereUniqueWithoutDepartamentoInput = {
    where: PersonalWhereUniqueInput
    update: XOR<PersonalUpdateWithoutDepartamentoInput, PersonalUncheckedUpdateWithoutDepartamentoInput>
    create: XOR<PersonalCreateWithoutDepartamentoInput, PersonalUncheckedCreateWithoutDepartamentoInput>
  }

  export type PersonalUpdateWithWhereUniqueWithoutDepartamentoInput = {
    where: PersonalWhereUniqueInput
    data: XOR<PersonalUpdateWithoutDepartamentoInput, PersonalUncheckedUpdateWithoutDepartamentoInput>
  }

  export type PersonalUpdateManyWithWhereWithoutDepartamentoInput = {
    where: PersonalScalarWhereInput
    data: XOR<PersonalUpdateManyMutationInput, PersonalUncheckedUpdateManyWithoutDepartamentoInput>
  }

  export type PersonalScalarWhereInput = {
    AND?: PersonalScalarWhereInput | PersonalScalarWhereInput[]
    OR?: PersonalScalarWhereInput[]
    NOT?: PersonalScalarWhereInput | PersonalScalarWhereInput[]
    id?: IntFilter<"Personal"> | number
    rut?: StringFilter<"Personal"> | string
    nombre?: StringFilter<"Personal"> | string
    apellidoMaterno?: StringFilter<"Personal"> | string
    apellidoPaterno?: StringFilter<"Personal"> | string
    departamentoId?: IntFilter<"Personal"> | number
  }

  export type AsignacionUpsertWithWhereUniqueWithoutDepartamentoInput = {
    where: AsignacionWhereUniqueInput
    update: XOR<AsignacionUpdateWithoutDepartamentoInput, AsignacionUncheckedUpdateWithoutDepartamentoInput>
    create: XOR<AsignacionCreateWithoutDepartamentoInput, AsignacionUncheckedCreateWithoutDepartamentoInput>
  }

  export type AsignacionUpdateWithWhereUniqueWithoutDepartamentoInput = {
    where: AsignacionWhereUniqueInput
    data: XOR<AsignacionUpdateWithoutDepartamentoInput, AsignacionUncheckedUpdateWithoutDepartamentoInput>
  }

  export type AsignacionUpdateManyWithWhereWithoutDepartamentoInput = {
    where: AsignacionScalarWhereInput
    data: XOR<AsignacionUpdateManyMutationInput, AsignacionUncheckedUpdateManyWithoutDepartamentoInput>
  }

  export type DepartamentoCreateWithoutPersonalInput = {
    nombre: string
    asignaciones?: AsignacionCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoUncheckedCreateWithoutPersonalInput = {
    id?: number
    nombre: string
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoCreateOrConnectWithoutPersonalInput = {
    where: DepartamentoWhereUniqueInput
    create: XOR<DepartamentoCreateWithoutPersonalInput, DepartamentoUncheckedCreateWithoutPersonalInput>
  }

  export type AsignacionCreateWithoutPersonalInput = {
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activo: ActivoCreateNestedOneWithoutAsignacionesInput
    usuario: UsuarioCreateNestedOneWithoutAsignacionesInput
    departamento?: DepartamentoCreateNestedOneWithoutAsignacionesInput
  }

  export type AsignacionUncheckedCreateWithoutPersonalInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activoId: number
    usuarioId: number
    departamentoId?: number | null
  }

  export type AsignacionCreateOrConnectWithoutPersonalInput = {
    where: AsignacionWhereUniqueInput
    create: XOR<AsignacionCreateWithoutPersonalInput, AsignacionUncheckedCreateWithoutPersonalInput>
  }

  export type AsignacionCreateManyPersonalInputEnvelope = {
    data: AsignacionCreateManyPersonalInput | AsignacionCreateManyPersonalInput[]
  }

  export type DepartamentoUpsertWithoutPersonalInput = {
    update: XOR<DepartamentoUpdateWithoutPersonalInput, DepartamentoUncheckedUpdateWithoutPersonalInput>
    create: XOR<DepartamentoCreateWithoutPersonalInput, DepartamentoUncheckedCreateWithoutPersonalInput>
    where?: DepartamentoWhereInput
  }

  export type DepartamentoUpdateToOneWithWhereWithoutPersonalInput = {
    where?: DepartamentoWhereInput
    data: XOR<DepartamentoUpdateWithoutPersonalInput, DepartamentoUncheckedUpdateWithoutPersonalInput>
  }

  export type DepartamentoUpdateWithoutPersonalInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    asignaciones?: AsignacionUpdateManyWithoutDepartamentoNestedInput
  }

  export type DepartamentoUncheckedUpdateWithoutPersonalInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    asignaciones?: AsignacionUncheckedUpdateManyWithoutDepartamentoNestedInput
  }

  export type AsignacionUpsertWithWhereUniqueWithoutPersonalInput = {
    where: AsignacionWhereUniqueInput
    update: XOR<AsignacionUpdateWithoutPersonalInput, AsignacionUncheckedUpdateWithoutPersonalInput>
    create: XOR<AsignacionCreateWithoutPersonalInput, AsignacionUncheckedCreateWithoutPersonalInput>
  }

  export type AsignacionUpdateWithWhereUniqueWithoutPersonalInput = {
    where: AsignacionWhereUniqueInput
    data: XOR<AsignacionUpdateWithoutPersonalInput, AsignacionUncheckedUpdateWithoutPersonalInput>
  }

  export type AsignacionUpdateManyWithWhereWithoutPersonalInput = {
    where: AsignacionScalarWhereInput
    data: XOR<AsignacionUpdateManyMutationInput, AsignacionUncheckedUpdateManyWithoutPersonalInput>
  }

  export type ActivoCreateWithoutMantenimientosInput = {
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date | string
    asignaciones?: AsignacionCreateNestedManyWithoutActivoInput
    auditorias?: AuditoriaCreateNestedManyWithoutActivoInput
  }

  export type ActivoUncheckedCreateWithoutMantenimientosInput = {
    id?: number
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date | string
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutActivoInput
    auditorias?: AuditoriaUncheckedCreateNestedManyWithoutActivoInput
  }

  export type ActivoCreateOrConnectWithoutMantenimientosInput = {
    where: ActivoWhereUniqueInput
    create: XOR<ActivoCreateWithoutMantenimientosInput, ActivoUncheckedCreateWithoutMantenimientosInput>
  }

  export type ActivoUpsertWithoutMantenimientosInput = {
    update: XOR<ActivoUpdateWithoutMantenimientosInput, ActivoUncheckedUpdateWithoutMantenimientosInput>
    create: XOR<ActivoCreateWithoutMantenimientosInput, ActivoUncheckedCreateWithoutMantenimientosInput>
    where?: ActivoWhereInput
  }

  export type ActivoUpdateToOneWithWhereWithoutMantenimientosInput = {
    where?: ActivoWhereInput
    data: XOR<ActivoUpdateWithoutMantenimientosInput, ActivoUncheckedUpdateWithoutMantenimientosInput>
  }

  export type ActivoUpdateWithoutMantenimientosInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
    asignaciones?: AsignacionUpdateManyWithoutActivoNestedInput
    auditorias?: AuditoriaUpdateManyWithoutActivoNestedInput
  }

  export type ActivoUncheckedUpdateWithoutMantenimientosInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
    asignaciones?: AsignacionUncheckedUpdateManyWithoutActivoNestedInput
    auditorias?: AuditoriaUncheckedUpdateManyWithoutActivoNestedInput
  }

  export type ActivoCreateWithoutAuditoriasInput = {
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date | string
    asignaciones?: AsignacionCreateNestedManyWithoutActivoInput
    mantenimientos?: MantenimientoCreateNestedManyWithoutActivoInput
  }

  export type ActivoUncheckedCreateWithoutAuditoriasInput = {
    id?: number
    tipo: string
    marca: string
    modelo: string
    estado: string
    ubicacion: string
    numeroSerie: string
    fechaAdquisicion: Date | string
    asignaciones?: AsignacionUncheckedCreateNestedManyWithoutActivoInput
    mantenimientos?: MantenimientoUncheckedCreateNestedManyWithoutActivoInput
  }

  export type ActivoCreateOrConnectWithoutAuditoriasInput = {
    where: ActivoWhereUniqueInput
    create: XOR<ActivoCreateWithoutAuditoriasInput, ActivoUncheckedCreateWithoutAuditoriasInput>
  }

  export type ActivoUpsertWithoutAuditoriasInput = {
    update: XOR<ActivoUpdateWithoutAuditoriasInput, ActivoUncheckedUpdateWithoutAuditoriasInput>
    create: XOR<ActivoCreateWithoutAuditoriasInput, ActivoUncheckedCreateWithoutAuditoriasInput>
    where?: ActivoWhereInput
  }

  export type ActivoUpdateToOneWithWhereWithoutAuditoriasInput = {
    where?: ActivoWhereInput
    data: XOR<ActivoUpdateWithoutAuditoriasInput, ActivoUncheckedUpdateWithoutAuditoriasInput>
  }

  export type ActivoUpdateWithoutAuditoriasInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
    asignaciones?: AsignacionUpdateManyWithoutActivoNestedInput
    mantenimientos?: MantenimientoUpdateManyWithoutActivoNestedInput
  }

  export type ActivoUncheckedUpdateWithoutAuditoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    ubicacion?: StringFieldUpdateOperationsInput | string
    numeroSerie?: StringFieldUpdateOperationsInput | string
    fechaAdquisicion?: DateTimeFieldUpdateOperationsInput | Date | string
    asignaciones?: AsignacionUncheckedUpdateManyWithoutActivoNestedInput
    mantenimientos?: MantenimientoUncheckedUpdateManyWithoutActivoNestedInput
  }

  export type AsignacionCreateWithoutActivoInput = {
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    usuario: UsuarioCreateNestedOneWithoutAsignacionesInput
    departamento?: DepartamentoCreateNestedOneWithoutAsignacionesInput
    personal?: PersonalCreateNestedOneWithoutAsignacionesInput
  }

  export type AsignacionUncheckedCreateWithoutActivoInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    usuarioId: number
    departamentoId?: number | null
    personalId?: number | null
  }

  export type AsignacionCreateOrConnectWithoutActivoInput = {
    where: AsignacionWhereUniqueInput
    create: XOR<AsignacionCreateWithoutActivoInput, AsignacionUncheckedCreateWithoutActivoInput>
  }

  export type AsignacionCreateManyActivoInputEnvelope = {
    data: AsignacionCreateManyActivoInput | AsignacionCreateManyActivoInput[]
  }

  export type MantenimientoCreateWithoutActivoInput = {
    fechas: Date | string
    tipo: string
    observacion: string
  }

  export type MantenimientoUncheckedCreateWithoutActivoInput = {
    id?: number
    fechas: Date | string
    tipo: string
    observacion: string
  }

  export type MantenimientoCreateOrConnectWithoutActivoInput = {
    where: MantenimientoWhereUniqueInput
    create: XOR<MantenimientoCreateWithoutActivoInput, MantenimientoUncheckedCreateWithoutActivoInput>
  }

  export type MantenimientoCreateManyActivoInputEnvelope = {
    data: MantenimientoCreateManyActivoInput | MantenimientoCreateManyActivoInput[]
  }

  export type AuditoriaCreateWithoutActivoInput = {
    fecha: Date | string
    hallazgo: string
  }

  export type AuditoriaUncheckedCreateWithoutActivoInput = {
    id?: number
    fecha: Date | string
    hallazgo: string
  }

  export type AuditoriaCreateOrConnectWithoutActivoInput = {
    where: AuditoriaWhereUniqueInput
    create: XOR<AuditoriaCreateWithoutActivoInput, AuditoriaUncheckedCreateWithoutActivoInput>
  }

  export type AuditoriaCreateManyActivoInputEnvelope = {
    data: AuditoriaCreateManyActivoInput | AuditoriaCreateManyActivoInput[]
  }

  export type AsignacionUpsertWithWhereUniqueWithoutActivoInput = {
    where: AsignacionWhereUniqueInput
    update: XOR<AsignacionUpdateWithoutActivoInput, AsignacionUncheckedUpdateWithoutActivoInput>
    create: XOR<AsignacionCreateWithoutActivoInput, AsignacionUncheckedCreateWithoutActivoInput>
  }

  export type AsignacionUpdateWithWhereUniqueWithoutActivoInput = {
    where: AsignacionWhereUniqueInput
    data: XOR<AsignacionUpdateWithoutActivoInput, AsignacionUncheckedUpdateWithoutActivoInput>
  }

  export type AsignacionUpdateManyWithWhereWithoutActivoInput = {
    where: AsignacionScalarWhereInput
    data: XOR<AsignacionUpdateManyMutationInput, AsignacionUncheckedUpdateManyWithoutActivoInput>
  }

  export type MantenimientoUpsertWithWhereUniqueWithoutActivoInput = {
    where: MantenimientoWhereUniqueInput
    update: XOR<MantenimientoUpdateWithoutActivoInput, MantenimientoUncheckedUpdateWithoutActivoInput>
    create: XOR<MantenimientoCreateWithoutActivoInput, MantenimientoUncheckedCreateWithoutActivoInput>
  }

  export type MantenimientoUpdateWithWhereUniqueWithoutActivoInput = {
    where: MantenimientoWhereUniqueInput
    data: XOR<MantenimientoUpdateWithoutActivoInput, MantenimientoUncheckedUpdateWithoutActivoInput>
  }

  export type MantenimientoUpdateManyWithWhereWithoutActivoInput = {
    where: MantenimientoScalarWhereInput
    data: XOR<MantenimientoUpdateManyMutationInput, MantenimientoUncheckedUpdateManyWithoutActivoInput>
  }

  export type MantenimientoScalarWhereInput = {
    AND?: MantenimientoScalarWhereInput | MantenimientoScalarWhereInput[]
    OR?: MantenimientoScalarWhereInput[]
    NOT?: MantenimientoScalarWhereInput | MantenimientoScalarWhereInput[]
    id?: IntFilter<"Mantenimiento"> | number
    fechas?: DateTimeFilter<"Mantenimiento"> | Date | string
    tipo?: StringFilter<"Mantenimiento"> | string
    observacion?: StringFilter<"Mantenimiento"> | string
    activoId?: IntFilter<"Mantenimiento"> | number
  }

  export type AuditoriaUpsertWithWhereUniqueWithoutActivoInput = {
    where: AuditoriaWhereUniqueInput
    update: XOR<AuditoriaUpdateWithoutActivoInput, AuditoriaUncheckedUpdateWithoutActivoInput>
    create: XOR<AuditoriaCreateWithoutActivoInput, AuditoriaUncheckedCreateWithoutActivoInput>
  }

  export type AuditoriaUpdateWithWhereUniqueWithoutActivoInput = {
    where: AuditoriaWhereUniqueInput
    data: XOR<AuditoriaUpdateWithoutActivoInput, AuditoriaUncheckedUpdateWithoutActivoInput>
  }

  export type AuditoriaUpdateManyWithWhereWithoutActivoInput = {
    where: AuditoriaScalarWhereInput
    data: XOR<AuditoriaUpdateManyMutationInput, AuditoriaUncheckedUpdateManyWithoutActivoInput>
  }

  export type AuditoriaScalarWhereInput = {
    AND?: AuditoriaScalarWhereInput | AuditoriaScalarWhereInput[]
    OR?: AuditoriaScalarWhereInput[]
    NOT?: AuditoriaScalarWhereInput | AuditoriaScalarWhereInput[]
    id?: IntFilter<"Auditoria"> | number
    fecha?: DateTimeFilter<"Auditoria"> | Date | string
    hallazgo?: StringFilter<"Auditoria"> | string
    activoId?: IntFilter<"Auditoria"> | number
  }

  export type AsignacionCreateManyUsuarioInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activoId: number
    departamentoId?: number | null
    personalId?: number | null
  }

  export type AsignacionUpdateWithoutUsuarioInput = {
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activo?: ActivoUpdateOneRequiredWithoutAsignacionesNestedInput
    departamento?: DepartamentoUpdateOneWithoutAsignacionesNestedInput
    personal?: PersonalUpdateOneWithoutAsignacionesNestedInput
  }

  export type AsignacionUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    personalId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsignacionUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    personalId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PersonalCreateManyDepartamentoInput = {
    id?: number
    rut: string
    nombre: string
    apellidoMaterno: string
    apellidoPaterno: string
  }

  export type AsignacionCreateManyDepartamentoInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activoId: number
    usuarioId: number
    personalId?: number | null
  }

  export type PersonalUpdateWithoutDepartamentoInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidoMaterno?: StringFieldUpdateOperationsInput | string
    apellidoPaterno?: StringFieldUpdateOperationsInput | string
    asignaciones?: AsignacionUpdateManyWithoutPersonalNestedInput
  }

  export type PersonalUncheckedUpdateWithoutDepartamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidoMaterno?: StringFieldUpdateOperationsInput | string
    apellidoPaterno?: StringFieldUpdateOperationsInput | string
    asignaciones?: AsignacionUncheckedUpdateManyWithoutPersonalNestedInput
  }

  export type PersonalUncheckedUpdateManyWithoutDepartamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidoMaterno?: StringFieldUpdateOperationsInput | string
    apellidoPaterno?: StringFieldUpdateOperationsInput | string
  }

  export type AsignacionUpdateWithoutDepartamentoInput = {
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activo?: ActivoUpdateOneRequiredWithoutAsignacionesNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutAsignacionesNestedInput
    personal?: PersonalUpdateOneWithoutAsignacionesNestedInput
  }

  export type AsignacionUncheckedUpdateWithoutDepartamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    personalId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsignacionUncheckedUpdateManyWithoutDepartamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    personalId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsignacionCreateManyPersonalInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    activoId: number
    usuarioId: number
    departamentoId?: number | null
  }

  export type AsignacionUpdateWithoutPersonalInput = {
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activo?: ActivoUpdateOneRequiredWithoutAsignacionesNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutAsignacionesNestedInput
    departamento?: DepartamentoUpdateOneWithoutAsignacionesNestedInput
  }

  export type AsignacionUncheckedUpdateWithoutPersonalInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsignacionUncheckedUpdateManyWithoutPersonalInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    activoId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsignacionCreateManyActivoInput = {
    id?: number
    fechaAsignacion: Date | string
    fechaDevolucion?: Date | string | null
    responsable: string
    usuarioId: number
    departamentoId?: number | null
    personalId?: number | null
  }

  export type MantenimientoCreateManyActivoInput = {
    id?: number
    fechas: Date | string
    tipo: string
    observacion: string
  }

  export type AuditoriaCreateManyActivoInput = {
    id?: number
    fecha: Date | string
    hallazgo: string
  }

  export type AsignacionUpdateWithoutActivoInput = {
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutAsignacionesNestedInput
    departamento?: DepartamentoUpdateOneWithoutAsignacionesNestedInput
    personal?: PersonalUpdateOneWithoutAsignacionesNestedInput
  }

  export type AsignacionUncheckedUpdateWithoutActivoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    personalId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsignacionUncheckedUpdateManyWithoutActivoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaAsignacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaDevolucion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    personalId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MantenimientoUpdateWithoutActivoInput = {
    fechas?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: StringFieldUpdateOperationsInput | string
    observacion?: StringFieldUpdateOperationsInput | string
  }

  export type MantenimientoUncheckedUpdateWithoutActivoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechas?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: StringFieldUpdateOperationsInput | string
    observacion?: StringFieldUpdateOperationsInput | string
  }

  export type MantenimientoUncheckedUpdateManyWithoutActivoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechas?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: StringFieldUpdateOperationsInput | string
    observacion?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriaUpdateWithoutActivoInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hallazgo?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriaUncheckedUpdateWithoutActivoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hallazgo?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriaUncheckedUpdateManyWithoutActivoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hallazgo?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}